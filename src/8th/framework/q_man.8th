(* 
	q_man.8th
 
  manage a pool of queues for use by tasks to return values etc.
 
 Copyright C 2018 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

\ ========================================
\ Testing only
true var, q_man_test

\ ----------------------------------
q_man_test @ #if
	\ Includes
	\ needs debug/sed
	\ true SED-CHECK
#then
\ ========================================

\ Set namespace
ns: fr

\ ===============================================================================
\ Queue reference and termination management

\ Holder for queue references
\ [[T,q],[T,q] ...]
\ If T is true the q is in use
[] var, __q_array

\ ----------------------------------
\ Locked var
: locked_q_array@
	__q_array lock @ ;

\ ----------------------------------
\ Unlocked var	
: unlock_q_array
	__q_array unlock drop ;

\ ----------------------------------

\ Add q with depth 10 to the array
: make_q	SED: a n --
	\ in: 	0: a - q_array
	\				1: n - idx
	\ out:	none
	a:new 0 false a:! 1 10 q:new a:! nip a:push ;

\ Create a pool of q's	
: q_man_alloc	SED: --
	\ in: 	none
	\ out:	none
	locked_q_array@
	' make_q 0 9 loop drop
	unlock_q_array ;

\ ----------------------------------
\ Find and return a free q
: q_get	SED: -- n
	\ in: 	none
	\ out:	0: n - id of free q
	locked_q_array@
		0 >r
		repeat
			r@ a:@ 0 a:@ not if
				\ Found a free slot so grab it
				0 true a:! r> break
			else
				r> n:1+ dup >r 2 pick a:len nip n:> if
					"No free slots found in q array!" log drop break
				else
					drop
				then
			then
		again
		nip nip
	unlock_q_array ;

\ ----------------------------------
\ Return a q by id
: q_get_from_id	SED: n -- q
	\ in: 	0: n - q id
	\ out:	0: q - q for id
	locked_q_array@
	swap a:@ 1 a:@ nip
	unlock_q_array ;
	
\ ----------------------------------
\ Release and clear the given q id
: q_release	SED: n --
	\ in: 	0: n - id of q to release
	\ out:	none
	locked_q_array@
	\ Release q
	swap a:@ 0 false a:!
	\ Clear q
	1 a:@ q:clear
	unlock_q_array ;
	
	
\ ========================================
\ Reset namespace
ns: user

\ ===============================================================================
\ Testing
\ ===============================================================================
q_man_test @ #if
	
	: run_get	\ idx --
		drop fr:q_get . cr \ fr:__q_array . cr
	;
	
	: run_get_from_id	\ idx -- q
		fr:q_get_from_id . cr 
	;
		
	: run_free	\ --
			fr:q_release fr:__q_array . cr
	;
	
	: usage_test	\ --
		' run_get 0 9 loop
		' run_get_from_id 0 9 loop
		' run_free 0 9 loop
		0.1 sleep
	;

	cr cr "Running usage test..." . cr cr
	fr:q_man_alloc \ fr:__q_array . cr
	usage_test
	1 sleep
	"Done usage test" . cr
	bye
#then