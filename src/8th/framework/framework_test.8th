(* 
	framework_test.8th
 
  Integration test for framework
 
 Copyright C 2018 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

\ Includes
"param_st.8th"  f:include
"task_man.8th"  f:include
"struct_manip.8th"  f:include
"pub_sub.8th"  f:include

\ Set namespace to avoid prefixing for the test
ns: fr

\ Push data into different tasks using struct_manip to dice data and store values and use param store as required
\ Init the param store
ps_alloc
\ Init publish subscribe service
pubsub_init

\ Test structures
{
	"general" : {
	\	key						src			index/val 	SoD			option list			
		"smplrate" : 	[false, [0, 				false, 	["48000", "96000", "192000"]]],
		"numrx" : 		[false, [0, 				false, 	["1", "2", "3"]]],
		"blksz" : 		[false, [1, 				false, 	["512", "1024", "2048", "4096"]]],
		"duplex" : 		[false, [false, 		false, 	[]]],
		"enabletx" : 	[false, [false, 		false, 	[]]]
	}
} var, struct

{
		\ HPSDR Protocol-1 only supports 3 radios
		\ More can be added into the array as required
		"radio-state" : [
			[
				\ src						SoD
				false, [null, false, 
				{
					"display-width": 0,
					"display-height": 0,
					"freq": 7100000,
					"mode": 0 ,
					"filter": 0 ,
					"agc": 0 ,
					"attn": 0 ,
					"hf-preamp": 0 ,
					"6m-preamp": 0 ,
					"audio-gain": 50
				} ]
			],
			[
				\ src						SoD
				false, [null, false, 
				{
					"display-width": 0,
					"display-height": 0,
					"freq": 7100000,
					"mode": 0 ,
					"filter": 0 ,
					"agc": 0 ,
					"attn": 0 ,
					"hf-preamp": 0 ,
					"6m-preamp": 0 ,
					"audio-gain": 50
				} ]
			],
			[
				\ src						SoD
				false, [null, false, 
				{
					"display-width": 0,
					"display-height": 0,
					"freq": 7100000,
					"mode": 0 ,
					"filter": 0 ,
					"agc": 0 ,
					"attn": 0 ,
					"hf-preamp": 0 ,
					"6m-preamp": 0 ,
					"audio-gain": 50
				} ]
			]
		]
	} var, struct1
	
: callback_wd_1	\ data
	\ "wd_1: " t:name@ s:+ " : " s:+ . . cr ;
	drop "1:" . ;

: callback_wd_2	\ data
	\ "wd_2: " t:name@ s:+ " : " s:+ . . cr ;
	drop "2:" . ;

: callback_wd_3	\ data
	\ "wd_3: " t:name@ s:+ " : " s:+ . . cr ;
	drop "3:" . ;
	
: callback_wd_4	\ data
	\ "wd_4: " t:name@ s:+ " : " s:+ . . cr ;
	drop "4:" . ;
	
: setup
	\ Register events
	false "Event1" pubsub_register
	false "Event2" pubsub_register
	true "Event3" pubsub_register
	false "Event4" pubsub_register
	false "Event5" pubsub_register
	true "Event6" pubsub_register
	false "Event7" pubsub_register
	false "Event8" pubsub_register
	true "Event9" pubsub_register
	
	\ Subscribe to events
	"Event1" ' callback_wd_1 pubsub_subscribe
	"Event2" ' callback_wd_1 pubsub_subscribe
	"Event3" ' callback_wd_1 pubsub_subscribe
	"Event4" ' callback_wd_1 pubsub_subscribe
	"Event5" ' callback_wd_1 pubsub_subscribe
	"Event6" ' callback_wd_1 pubsub_subscribe
	"Event7" ' callback_wd_1 pubsub_subscribe
	"Event8" ' callback_wd_1 pubsub_subscribe
	"Event9" ' callback_wd_1 pubsub_subscribe
	
	"Event1" ' callback_wd_2 pubsub_subscribe
	"Event2" ' callback_wd_2 pubsub_subscribe
	"Event3" ' callback_wd_2 pubsub_subscribe
	"Event4" ' callback_wd_2 pubsub_subscribe
	"Event5" ' callback_wd_2 pubsub_subscribe
	"Event6" ' callback_wd_2 pubsub_subscribe
	"Event7" ' callback_wd_2 pubsub_subscribe
	"Event8" ' callback_wd_2 pubsub_subscribe
	"Event9" ' callback_wd_2 pubsub_subscribe
	
	"Event1" ' callback_wd_3 pubsub_subscribe
	"Event2" ' callback_wd_3 pubsub_subscribe
	"Event3" ' callback_wd_3 pubsub_subscribe
	"Event4" ' callback_wd_3 pubsub_subscribe
	"Event5" ' callback_wd_3 pubsub_subscribe
	"Event6" ' callback_wd_3 pubsub_subscribe
	"Event7" ' callback_wd_3 pubsub_subscribe
	"Event8" ' callback_wd_3 pubsub_subscribe
	"Event9" ' callback_wd_3 pubsub_subscribe
	
	"Event1" ' callback_wd_4 pubsub_subscribe
	"Event2" ' callback_wd_4 pubsub_subscribe
	"Event3" ' callback_wd_4 pubsub_subscribe
	"Event4" ' callback_wd_4 pubsub_subscribe
	"Event5" ' callback_wd_4 pubsub_subscribe
	"Event6" ' callback_wd_4 pubsub_subscribe
	"Event7" ' callback_wd_4 pubsub_subscribe
	"Event8" ' callback_wd_4 pubsub_subscribe
	"Event9" ' callback_wd_4 pubsub_subscribe
;

: do_publish	
	\ Publish events using struct_manip to extract values from the test structures
	"Event1" struct @ ["general","blksz",1,2] val@ pubsub_publish
	"Event2" struct @ ["general","smplrate",1,2] ["general","smplrate",1,0] idx_val@ pubsub_publish
	"Event3" struct @ ["general","blksz",1,2] val@ pubsub_publish
	"Event4" struct @ ["general","blksz",1,2] val@ pubsub_publish
	"Event5" struct @ ["general","numrx",1,0] val@ pubsub_publish
	"Event6" struct @ ["general","blksz",1,2] val@ pubsub_publish
	"Event7" struct @ ["general","blksz",1,2] val@ pubsub_publish
	"Event8" struct @ ["general","blksz",1,2] val@ pubsub_publish
	"Event9" [0, false, ["48000", "96000", "192000"]] [2] [0] idx_val@  pubsub_publish
;

: runtest
	cr cr "Run test..." . cr cr
	do_publish 
	0.05
	sleep ;

setup	
1 sleep
' runtest 10 times
pubsub_term

\ Wait for all tasks to complete
wait_all

\ Reset namespace
ns: user

\ allow log to flush...
0.2 sleep
bye

