(*
	app_model.8th
 
  radio state model for the SDRLibEConsole application
 
 Copyright C 2018 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

needs stack/3drop

\ ========================================
\ Testing only
true var, app_model_test
app_model_test @ #if
	\ Includes```````````````````````````````````````````````````````````````````````````````````````````````````````````
	"../framework/param_st.8th" f:include
	"../framework/task_man.8th" f:include
	"../framework/struct_manip.8th" f:include
	"../common/events.8th" f:include
	"../common/registrations.8th" f:include
	"../framework/pub_sub.8th"  f:include
	"../common/test_sink.8th" f:include
	"../common/persist.8th" f:include
	"../common/radio_defs.8th" f:include
	"model_common.8th" f:include
	\ needs debug/sed
	\ true SED-CHECK
#then

\ ========================================

\ Define our SDR namespace
ns: sdr

\ ===========================================================================================
\ TASK LEVEL CODE
\ PRIVATE

\ ===============================================================================
\ Default app model structure
\ Model data which is used as default when there is no saved model.

: __app_model_default
	{
		\ HPSDR Protocol-1 only supports 3 radios
		\ More can be added into the array as required
		"radio-state" : [
			[
				\ src						SoD
				false, [null, false, 
				{
					"display-width": 0,
					"display-height": 0,
					"freq": 7100000,
					"mode": ` CH_LSB ` ,
					"filter": ` CH_2K4 ` ,
					"agc": ` CH_AGC_MED ` ,
					"attn": ` ATTN_NONE ` ,
					"hf-preamp": ` PRE_OFF ` ,
					"6m-preamp": ` PRE_OFF ` ,
					"audio-gain": 50
				} ]
			],
			[
				\ src						SoD
				false, [null, false, 
				{
					"display-width": 0,
					"display-height": 0,
					"freq": 7100000,
					"mode": ` CH_LSB ` ,
					"filter": ` CH_2K4 ` ,
					"agc": ` CH_AGC_MED ` ,
					"attn": ` ATTN_NONE ` ,
					"hf-preamp": ` PRE_OFF ` ,
					"6m-preamp": ` PRE_OFF ` ,
					"audio-gain": 50
				} ]
			],
			[
				\ src						SoD
				false, [null, false, 
				{
					"display-width": 0,
					"display-height": 0,
					"freq": 7100000,
					"mode": ` CH_LSB ` ,
					"filter": ` CH_2K4 ` ,
					"agc": ` CH_AGC_MED ` ,
					"attn": ` ATTN_NONE ` ,
					"hf-preamp": ` PRE_OFF ` ,
					"6m-preamp": ` PRE_OFF ` ,
					"audio-gain": 50
				} ]
			]
			],
			"tx-state" : [
				\ src						SoD
				false, [null, false, 
				{
					"state" :
					{
						"duplex" : false,
						"rf-gain": 50,
						"mic-gain": 50
					},
					\ In simplex mode the TX follows Radio 1 and can't be changed
					"simplex" : 
					{
						\ Copy of the radio 1 values
						"freq": 7100000,
						"mode": ` CH_LSB ` ,
						"filter": ` CH_2K4 `
					},
					\ In duplex mode the TX can be on a different freq/mode/filter than Radio 1
					"duplex" : 
					{
						\ Any allowable combination
						"freq": 7100000,
						"mode": ` CH_LSB ` ,
						"filter": ` CH_2K4 `
					}
				}
			]
		]
	}
;

\ ========================================
\ Model management

\ ----------------------------------
\ Get model
: __app_model@	SED: -- m
	\ in: 	none
	\ out:	model
	"app_model" t:@ ;

\ ----------------------------------
\ Save model
: __app_model!	SED: m -- 
	\ in: 	model
	\ out:	none
	"app_model" t:! ;
	
\ ----------------------------------
\ Restore model else use the default
: __app_model_restore	SED: --
	\ in: 	none
	\ out:	none
	\ Attempt to restore the model
	\ Get the path to the conf app file
	\ BC: why do I need a sleep, else fails and crashes
	APP_MODEL_FILENAME create_model_path 0.1 sleep null? if
		"Failed to locate directory. Please create a conf directory under /8th." throw
	then
	\ Attempt to restore the options model
	restore_model_data null?
	if
		"No app model found, using app default" log
		drop
		\ No persisted model so use default and save to task var
		__app_model_default dup __app_model!
		\ Save the default model
		APP_MODEL_FILENAME create_model_path create_model_file 0.1 sleep save_model_data
		2drop
	else
		\ Save the restored model to a task var
		__app_model!
	then
;

\ ----------------------------------
\ Save current model 
: __app_model_save	SED: --
	\ in: 	none
	\ out:	none
	__app_model@ APP_MODEL_FILENAME create_model_path save_model_data drop
;

\ ----------------------------------
\ Start-of-day. Send restored/default data to all subscribers
: __app_start_of_day	SED: --
	\ in: 	none
	\ out:	none
	__app_model@ >r
	sdr:UI_DUPLEX r@ ["tx-state", ` dyn_idx ` , ` data_idx ` ] fr:val@ fr:pubsub_publish
	sdr:UI_RFGAIN r@ ["tx-state", ` dyn_idx ` , ` data_idx ` ] fr:val@ fr:pubsub_publish
	sdr:UI_MICGAIN r@ ["tx-state", ` dyn_idx ` , ` data_idx ` ] fr:val@ fr:pubsub_publish
	sdr:UI_R1_FREQ r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R2_FREQ r@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R3_FREQ r@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_TX_FREQ r@ ["tx-state", ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R1_MODE r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R2_MODE r@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R3_MODE r@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_TX_MODE r@ ["tx-state", ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R1_FILT r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R2_FILT r@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R3_FILT r@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_TX_FILT r@ ["tx-state", ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R1_AGC r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R2_AGC r@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R3_AGC r@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R_ATTN r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R_HF_PRE r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R_6M_PRE r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R1_AFGAIN r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R2_AFGAIN r@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:UI_R3_AFGAIN r@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	
	sdr:SYS_DUPLEX r@ ["tx-state", ` dyn_idx ` , ` data_idx ` ] fr:val@ fr:pubsub_publish
	sdr:SYS_RFGAIN r@ ["tx-state", ` dyn_idx ` , ` data_idx ` ] fr:val@ fr:pubsub_publish
	sdr:SYS_MICGAIN r@ ["tx-state", ` dyn_idx ` , ` data_idx ` ] fr:val@ fr:pubsub_publish
	sdr:SYS_R1_FREQ r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R2_FREQ r@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R3_FREQ r@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_TX_FREQ r@ ["tx-state", ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R1_MODE r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R2_MODE r@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R3_MODE r@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish	
	sdr:SYS_TX_MODE r@ ["tx-state", ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R1_FILT r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R2_FILT r@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish  
	sdr:SYS_R3_FILT r@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_TX_FILT r@ ["tx-state", ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R1_AGC r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R2_AGC r@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R3_AGC r@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R_ATTN r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R_HF_PRE r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R_6M_PRE r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R1_AFGAIN r@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R2_AFGAIN r@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_R3_AFGAIN r> ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish

	"App Start-of-Day complete " log
;

\ ========================================
\ Message Handlers
\ Called only by app model gen-server
\ ========================================

\ Initialise the app model at task level
: do_app_init	SED: m --
	\ in: 	message
	\ out:	none
	drop __app_model_restore
;

\ ----------------------------------
\ Run SOD
: do_app_start_of_day	SED: m --
	\ in: 	message
	\ out:	none
	drop __app_start_of_day
;

\ ----------------------------------
\ Close the app model at task level
: do_app_close	SED: m --
	\ in: 	message
	\ out:	none
	drop __app_model_save
;

\ ========================================
\ Getters and Setters

\ ========================================
\ Frequency

: do_app_r1_set_freq	SED: a --
	\ in: 	0: n - new R1 frequency in Hz
	\				1: T - true if to be propogated to UI as well as SYS
	\ out: 	none
	a:open
	__app_model@ ["radio-state", ` radio_1 ` , ` dyn_idx ` , ` data_idx ` ] "freq" 4 pick fr:val! 
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "simplex"] "freq" 4 pick fr:val!
	sdr:SYS_R1_FREQ __app_model@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_TX_FREQ __app_model@ ["tx-state", ` dyn_idx `, ` data_idx ` ] fr:val@ fr:pubsub_publish
	if
		sdr:UI_R1_FREQ __app_model@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
		sdr:UI_TX_FREQ __app_model@ ["tx-state", ` dyn_idx `, ` data_idx ` ] fr:val@ fr:pubsub_publish
	then drop
;

\ ----------------------------------
: do_app_r2_set_freq	SED: a --
	a:open
	\ in: 	0: n - new R2 frequency in Hz
	\				1: T - true if to be propogated to UI as well as SYS
	\ out: 	none
	__app_model@ ["radio-state", ` radio_2 ` , ` dyn_idx ` , ` data_idx ` ] "freq" 4 pick fr:val!
	sdr:SYS_R2_FREQ __app_model@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	if
		sdr:UI_R2_FREQ __app_model@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	then  drop
;

\ ----------------------------------
: do_app_r3_set_freq	SED: a --
	a:open
	\ in: 	0: n - new R3 frequency in Hz
	\				1: T - true if to be propogated to UI as well as SYS
	\ out: 	none
	__app_model@ ["radio-state", ` radio_3 ` , ` dyn_idx ` , ` data_idx ` ] "freq" 4 pick fr:val!
	sdr:SYS_R3_FREQ __app_model@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	if
		sdr:UI_R3_FREQ __app_model@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	then  drop
;

\ ----------------------------------
: __do_app_tx_set_simplex_freq	SED: n T --
	\ in: 	0: T - true if to be propogated to UI as well as SYS
	\				1: n - new TX simplex frequency in Hz
	\ out: 	none
	swap __app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "simplex"] "freq" 3 pick fr:val!
	sdr:SYS_TX_FREQ __app_model@ ["tx-state", ` dyn_idx `, ` data_idx ` ] fr:val@ fr:pubsub_publish
	if
		sdr:UI_TX_FREQ __app_model@ ["tx-state", ` dyn_idx `, ` data_idx ` ] fr:val@ fr:pubsub_publish
	then
;

\ ----------------------------------
: __do_app_tx_set_duplex_freq		SED: n T --
	\ in: 	0: T - true if to be propogated to UI as well as SYS
	\				1: n - new TX duplex frequency in Hz
	\ out: 	none
	swap __app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "duplex"] "freq" 3 pick fr:val!
	sdr:SYS_TX_FREQ __app_model@ ["tx-state", ` dyn_idx `, ` data_idx ` ] fr:val@ fr:pubsub_publish
	if
		sdr:UI_TX_FREQ __app_model@ ["tx-state", ` dyn_idx `, ` data_idx ` ] fr:val@ fr:pubsub_publish
	then
;

\ ----------------------------------
: do_app_tx_set_freq	SED: a --
	a:open
	\ in: 	0: n - new simplex/duplex TX frequency in Hz
	\				1: T - true if to be propogated to UI as well as SYS
	\ out: 	none
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "state", "duplex"] fr:val@ if
		__do_app_tx_set_duplex_freq
	else
		__do_app_tx_set_simplex_freq
	then drop
;

\ ========================================
\ Modes

\ ----------------------------------
: do_app_r1_set_mode	SED: a --
	a:open
	\ in: 	0: n - new R1 mode
	\ out: 	none
	__app_model@ ["radio-state", ` radio_1 ` , ` dyn_idx ` , ` data_idx ` ] "mode" 3 pick fr:val!
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "simplex"] "mode" 3 pick fr:val!
	sdr:SYS_R1_MODE __app_model@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_TX_MODE __app_model@ ["tx-state", ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish drop
;

\ ----------------------------------
: do_app_r2_set_mode	SED: a --
	a:open
	\ in: 	0: n - new R2 mode
	\ out: 	none
	__app_model@ ["radio-state", ` radio_2 ` , ` dyn_idx ` , ` data_idx ` ] "mode" 3 pick fr:val!
	sdr:SYS_R2_MODE __app_model@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish drop
;

\ ----------------------------------
: do_app_r3_set_mode	SED: a --
	a:open
	\ in: 	0: n - new R3 mode
	\ out: 	none
	__app_model@ ["radio-state", ` radio_3 ` , ` dyn_idx ` , ` data_idx ` ] "mode" 3 pick fr:val!
	sdr:SYS_R3_MODE __app_model@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish drop
;

\ ----------------------------------
: __do_app_tx_set_simplex_mode SED: n --
	\ in: 	0: n - new TX simplex mode
	\ out: 	none
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "simplex"] "mode" 3 pick fr:val!
	sdr:SYS_TX_MODE __app_model@ ["tx-state", ` dyn_idx `, ` data_idx ` ] fr:val@ fr:pubsub_publish
;

\ ----------------------------------
: __do_app_tx_set_duplex_mode SED: n --
	\ in: 	0: n - new TX duplex mode
	\ out: 	none
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "duplex"] "mode" 3 pick fr:val!
	sdr:SYS_TX_MODE __app_model@ ["tx-state", ` dyn_idx `, ` data_idx ` ] fr:val@ fr:pubsub_publish
;

\ ----------------------------------
: do_app_tx_set_mode SED: a --
	a:open
	\ in: 	0: n - new simplex/duplex TX mode
	\ out: 	none
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "state", "duplex"] fr:val@ if
		__do_app_tx_set_duplex_mode
	else
		__do_app_tx_set_simplex_mode
	then drop
;

\ ========================================
\ Filters

: do_app_r1_set_filter SED: a --
	a:open
	\ in: 	0: n - new R1 filter
	\ out: 	none
	__app_model@ ["radio-state", ` radio_1 ` , ` dyn_idx ` , ` data_idx ` ] "filter" 3 pick fr:val!
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "simplex"] "filter" 3 pick fr:val!
	sdr:SYS_R1_FILT __app_model@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish
	sdr:SYS_TX_FILT __app_model@ ["tx-state", ` dyn_idx `, ` data_idx `] fr:val@ pubsub_publish drop
;

\ ----------------------------------
: do_app_r2_set_filter SED: a --
	a:open
	\ in: 	0: n - new R2 filter
	\ out: 	none
	__app_model@ ["radio-state", ` radio_2 ` , ` dyn_idx ` , ` data_idx ` ] "filter" 3 pick fr:val!
	sdr:SYS_R2_FILT __app_model@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish drop
;

\ ----------------------------------
: do_app_r3_set_filter SED: a --
	a:open
	\ in: 	0: n - new R2 filter
	\ out: 	none
	__app_model@ ["radio-state", ` radio_3 ` , ` dyn_idx ` , ` data_idx ` ] "filter" 3 pick fr:val!
	sdr:SYS_R3_FILT __app_model@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish drop
;

\ ----------------------------------
: __do_app_tx_set_simplex_filter SED: n --
	\ in: 	0: n - new TX simplex filter
	\ out: 	none
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "simplex"] "filter" 3 pick fr:val!
	sdr:SYS_TX_FILT __app_model@ ["tx-state", ` dyn_idx `, ` data_idx ` ] fr:val@ fr:pubsub_publish
;

\ ----------------------------------
: __do_app_tx_set_duplex_filter SED: n --
	\ in: 	0: n - new TX duplex filter
	\ out: 	none
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "duplex"] "filter" 3 pick fr:val!
	sdr:SYS_TX_FILT __app_model@ ["tx-state", ` dyn_idx `, ` data_idx ` ] fr:val@ fr:pubsub_publish
;

\ ----------------------------------
: do_app_tx_set_filter SED: a --
	a:open
	\ in: 	0: n - new simplex/duplex filter
	\ out: 	none
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "state", "duplex"] fr:val@ if
		__do_app_tx_set_duplex_filter
	else
		__do_app_tx_set_simplex_filter
	then drop
;

\ ========================================
\ AGC

: do_app_r1_set_agc SED: a --
	a:open
	\ in: 	0: n - new R1 AGC setting
	\ out: 	none
	__app_model@ ["radio-state", ` radio_1 ` , ` dyn_idx ` , ` data_idx ` ] "agc" 3 pick fr:val!
	sdr:SYS_R1_AGC __app_model@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish drop
;

\ ----------------------------------
: do_app_r2_set_agc SED: a --
	a:open
	\ in: 	0: n - new R2 AGC setting
	\ out: 	none
	__app_model@ ["radio-state", ` radio_2 ` , ` dyn_idx ` , ` data_idx ` ] "agc" 3 pick fr:val!
	sdr:SYS_R2_AGC __app_model@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish drop
;

\ ----------------------------------
: do_app_r3_set_agc SED: a --
	a:open
	\ in: 	0: n - new R3 AGC setting
	\ out: 	none
	__app_model@ ["radio-state", ` radio_3 ` , ` dyn_idx ` , ` data_idx ` ] "agc" 3 pick fr:val!
	sdr:SYS_R3_AGC __app_model@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish drop
;

\ ========================================
\ AF Gain

: do_app_r1_set_afgain SED: a --
	a:open
	\ in: 	0: n - new R1 AF gain setting
	\ out: 	none
	__app_model@ ["radio-state", ` radio_1 ` , ` dyn_idx ` , ` data_idx ` ] "audio-gain" 3 pick fr:val!
	sdr:SYS_R1_AFGAIN __app_model@ ["radio-state", ` radio_1 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish drop
;

\ ----------------------------------
: do_app_r2_set_afgain SED: a --
	a:open
	\ in: 	0: n - new R2 AF gain setting
	\ out: 	none
	__app_model@ ["radio-state", ` radio_2 ` , ` dyn_idx ` , ` data_idx ` ] "audio-gain" 3 pick fr:val!
	sdr:SYS_R2_AFGAIN __app_model@ ["radio-state", ` radio_2 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish drop
;

\ ----------------------------------
: do_app_r3_set_afgain SED: a --
	a:open
	\ in: 	0: n - new R3 AF gain setting
	\ out: 	none
	__app_model@ ["radio-state", ` radio_3 ` , ` dyn_idx ` , ` data_idx ` ] "audio-gain" 3 pick fr:val!
	sdr:SYS_R3_AFGAIN __app_model@ ["radio-state", ` radio_3 `, ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish drop
;

\ ============================================
\ Get/Set TX Attributes
(*
: __do_response	SED: --
	\ in: 	none
	\ out: 	none
	swap fr:q_get_from_id swap 
	\ Clone response data (probably unnecessary as all scalers
	clone nip
	\ Push to given q and notify caller
	q:push q:notify drop 
;
*)

: __do_response	SED: s * --
	\ in: 	none
	\ out: 	none
	swap fr:task_reg@ swap 
	\ Clone response data (probably unnecessary as all scalers
	clone nip
	\ Push to given q and notify caller
	2dup t:push drop t:notify
;

\ Duplex
: do_app_tx_set_duplex SED: a --
	a:open
	\ in: 	0: T - true if duplex on
	\ out: 	none
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "state" ] "duplex" 3 pick fr:val! drop
;

\ ----------------------------------
: do_app_tx_get_duplex SED: a --
	a:open
	\ in: 	0: q - q id to send reply on
	\ out: 	q: T - true if duplex on
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "state", "duplex"] fr:val@
	__do_response
;

\ ----------------------------------
: do_app_tx_get_simplex_freq SED: a --
	a:open
	\ in: 	0: q - q id to send reply on
	\ out: 	q: n - simplex frequency
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "simplex", "freq"] fr:val@
	__do_response
;

\ ----------------------------------
: do_app_tx_get_duplex_freq SED: a --
	a:open
	\ in: 	0: q - q id to send reply on
	\ out: 	q: n - duplex frequency
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "duplex", "freq"] fr:val@
	__do_response
;

\ ----------------------------------
: do_app_tx_get_simplex_mode SED: a --
	a:open
	\ in: 	0: q - q id to send reply on
	\ out: 	q: n - simplex mode
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "simplex", "mode"] fr:val@
	__do_response
;

\ ----------------------------------
: do_app_tx_get_duplex_mode SED: a --
	a:open
	\ in: 	0: q - q id to send reply on
	\ out: 	q: n - duplex mode
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "duplex", "mode"] fr:val@
	__do_response
;

\ ----------------------------------
: do_app_tx_get_simplex_filter SED: a --
	a:open
	\ in: 	0: q - q id to send reply on
	\ out: 	q: n - simplex filter
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "simplex", "filter"] fr:val@
	__do_response
;

\ ----------------------------------
: do_app_tx_get_duplex_filter SED: a --
	a:open
	\ in: 	0: q - q id to send reply on
	\ out: 	q: n - duplex mode
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "duplex", "filter"] fr:val@
	__do_response
;

\ ----------------------------------
: do_app_tx_set_rfgain SED: a --
	a:open
	\ in: 	0: n - rf gain value
	\ out: 	none
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "state"] "rf-gain" 3 pick fr:val!
	sdr:SYS_RFGAIN __app_model@ ["tx-state", ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish drop
;

\ ----------------------------------
: do_app_tx_set_micgain SED: a --
	a:open
	\ in: 	0: n - mic gain value
	\ out: 	none
	__app_model@ ["tx-state", ` dyn_idx ` , ` data_idx ` , "state"] "mic-gain" 3 pick fr:val!
	sdr:SYS_MICGAIN __app_model@ ["tx-state", ` dyn_idx `, ` data_idx `] fr:val@ fr:pubsub_publish drop
;

\ ========================================
\ Internal tests
: do_app_tests	SED: m --
	\ in: 	message
	\ out:	none
	drop 
	\ Tests go here
;

\ ===========================================================================================
\ MAIN CODE

\ Call level interface from all modules, may be called by any task.
\ The app model does not subscribe to any events, it is called directly usually off an 
\ event fielded by another module. However it does publish events where others may be 
\ interested in updates to the model. 

\ ----------------------------------
\ Module initialisation
: app_model_init	SED: --
	\ in: 	none
	\ out:	none
	\ Create the app model gen-server
	"AppModel_TASK" t:curtask 2 ' fr:gen_server t:task-n -1 sleep drop
	\ Ask the model to initialise itself
	"AppModel_TASK" ' do_app_init a:new fr:msg!
	"App model initialised sent" log
	"AppModel_TASK" ' do_app_start_of_day a:new fr:msg!
	"App model start of day sent" log ;

\ ----------------------------------
\ Module close
: app_model_term	SED: --
	\ in: 	none
	\ out:	none
	\ Tidy close the model
	"AppModel_TASK" ' do_app_close a:new fr:msg!
	2.0 sleep
	\ Ask the model to exit
	"AppModel_TASK" ' fr:do_term a:new fr:msg! ;

\ ----------------------------------
\ Ask task to run internal tests
: app_model_tests SED: --
	"AppModel_TASK" ' do_app_tests a:new fr:msg! ;

\ ===============================================================================
\ Public procedural interface
\ ===============================================================================

\ ========================================
\ Frequency
: model_r1_set_freq	SED: n T --
	\ in: 	0: n - new R1 frequency in Hz
	\				1: T - true if to be propogated to UI as well as SYS
	\ out: 	none
	a:new rot a:push swap a:push
	"AppModel_TASK" ' do_app_r1_set_freq rot fr:msg! ;

\ ----------------------------------
: model_r2_set_freq	SED: n T --
	\ in: 	0: n - new R2 frequency in Hz
	\				1: T - true if to be propogated to UI as well as SYS
	\ out: 	none
	a:new rot a:push swap a:push
	"AppModel_TASK" ' do_app_r2_set_freq rot fr:msg! ;

\ ----------------------------------	
: model_r3_set_freq	SED: n T --
	\ in: 	0: n - new R3 frequency in Hz
	\				1: T - true if to be propogated to UI as well as SYS
	\ out: 	none
	a:new rot a:push swap a:push
	"AppModel_TASK" ' do_app_r3_set_freq rot fr:msg! ;

\ ----------------------------------	
: model_tx_set_freq	SED: n T --
	\ in: 	0: n - new TX frequency in Hz
	\				1: T - true if to be propogated to UI as well as SYS
	\ out: 	none
	a:new rot a:push swap a:push
	"AppModel_TASK" ' do_app_tx_set_freq rot fr:msg! ;
	
\ ========================================
\ Modes

: model_r1_set_mode	SED: n --
	\ in: 	0: n - new R1 mode
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_r1_set_mode rot fr:msg! ;

\ ----------------------------------	
: model_r2_set_mode	SED: n --
	\ in: 	0: n - new R2 mode
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_r2_set_mode rot fr:msg! ;

\ ----------------------------------	
: model_r3_set_mode	SED: n --
	\ in: 	0: n - new R3 mode
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_r3_set_mode rot fr:msg! ;

\ ----------------------------------	
: model_tx_set_mode	SED: n --
	\ in: 	0: n - new TX mode
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_tx_set_mode rot fr:msg! ;

\ ========================================
\ Filters

: model_r1_set_filter	SED: n --
	\ in: 	0: n - new R1 filter
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_r1_set_filter rot fr:msg! ;

\ ----------------------------------
: model_r2_set_filter	SED: n --
	\ in: 	0: n - new R2 filter
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_r2_set_filter rot fr:msg! ;

\ ----------------------------------	
: model_r3_set_filter	SED: n --
	\ in: 	0: n - new R3 filter
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_r3_set_filter rot fr:msg! ;

\ ----------------------------------	
: model_tx_set_filter	SED: n --
	\ in: 	0: n - new TX filter
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_tx_set_filter rot fr:msg! ;

\ ========================================
\ AGC

: model_r1_set_agc	SED: n --
	\ in: 	0: n - new R1 AGC
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_r1_set_agc rot fr:msg! ;

\ ----------------------------------
: model_r2_set_agc	SED: n --
	\ in: 	0: n - new R2 AGC
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_r2_set_agc rot fr:msg! ;

\ ----------------------------------	
: model_r3_set_agc	SED: n --
	\ in: 	0: n - new R3 AGC
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_r3_set_agc rot fr:msg! ;

\ ========================================
\ AF Gain

: model_r1_set_afgain	SED: n --
	\ in: 	0: n - new R1 AF gain
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_r1_set_afgain rot fr:msg! ;

\ ----------------------------------	
: model_r2_set_afgain	SED: n --
	\ in: 	0: n - new R2 AF gain
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_r2_set_afgain rot fr:msg! ;

\ ----------------------------------	
: model_r3_set_afgain	SED: n --
	\ in: 	0: n - new R3 AF gain
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_r3_set_afgain rot fr:msg! ;

\ ========================================
\ TX Attributes

: model_tx_set_duplex SED: T --
	\ in: 	0: T - true if duplex
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_tx_set_duplex rot fr:msg! ;

\ ----------------------------------	
: model_tx_set_rfgain SED:  n --
	\ in: 	0: n - RF gain
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_tx_set_rfgain rot fr:msg! ;

\ ----------------------------------	
: model_tx_set_micgain SED:  n --
	\ in: 	0: n - Mic gain
	\ out: 	none
	a:new swap a:push
	"AppModel_TASK" ' do_app_tx_set_micgain rot fr:msg! ;

\ ----------------------------------		
\ Following are request/response words

\ Add sender to message
: __plus_sender	SED:	-- a
	\ in: 	none
	\ out: 	0: a - [new q id for response]
	a:new t:name@ a:push ;
	
\ ----------------------------------
\ Get task response
: __get_response	SED: -- *
	\ in: 	none
	\ out: 	0: * - response
	t:pop null? if
		\ Nothing yet, so wait a while
		drop -1 sleep t:pop null? if 
			drop "Timeout waiting for app model response!" log 
			"???"
		then
	then ;

\ ----------------------------------	
: model_tx_get_duplex SED:  -- T
	\ in: 	none
	\ out: 	0: T - true if duplex on
	\ Send the parameters plus a reply q
	__plus_sender
	"AppModel_TASK" ' do_app_tx_get_duplex rot fr:msg! 
	__get_response ;

\ ----------------------------------	
: model_tx_get_simplex_freq SED:  -- n
	\ in: 	none
	\ out: 	0: n - simplex freq
	__plus_sender
	"AppModel_TASK" ' do_app_tx_get_simplex_freq rot fr:msg! 
	__get_response ;

\ ----------------------------------	
: model_tx_get_duplex_freq SED:  -- n
	\ in: 	none
	\ out: 	0: n - duplex freq
	__plus_sender
	"AppModel_TASK" ' do_app_tx_get_duplex_freq rot fr:msg!
	__get_response ;

\ ----------------------------------	
: model_tx_get_simplex_mode SED:  -- n
	\ in: 	none
	\ out: 	0: n - simplex mode
	__plus_sender
	"AppModel_TASK" ' do_app_tx_get_simplex_mode rot fr:msg! 
	__get_response ;

\ ----------------------------------	
: model_tx_get_duplex_mode SED:  -- n
	\ in: 	none
	\ out: 	0: n - duplex mode
	__plus_sender
	"AppModel_TASK" ' do_app_tx_get_duplex_mode rot fr:msg! 
	__get_response ;

\ ----------------------------------		
: model_tx_get_simplex_filter SED:  -- n
	\ in: 	none
	\ out: 	0: n - simplex filter
	__plus_sender
	"AppModel_TASK" ' do_app_tx_get_simplex_filter rot fr:msg! 
	__get_response ;

\ ----------------------------------		
: model_tx_get_duplex_filter SED:  -- n
	\ in: 	none
	\ out: 	0: n - duplex filter
	__plus_sender
	"AppModel_TASK" ' do_app_tx_get_duplex_filter rot fr:msg! 
	__get_response ;

\ ========================================
\ Restore namespace	
ns: user	

\ ===============================================================================
\ Testing
\ ===============================================================================
app_model_test @ #if

	\ Common initialisation
	: setup
		"Doing setup" log
		\ Param stack alloc
		param_st_alloc
		\ Pub/sub init
		' sdr:do_registrations fr:pubsub_init
		\ Set up test sink subscriptions
		sdr:test_registrations
		"Setup complete" log
	;
		
	\ Run the procedural tests
	: run_proc
		\ Procedural interface tests
		7100000 false sdr:model_r1_set_freq
		7100000 false sdr:model_r2_set_freq
		7100000 false sdr:model_r3_set_freq
		7100000 false sdr:model_tx_set_freq
		"LSB" sdr:mode_for_name sdr:model_r1_set_mode
		"USB" sdr:mode_for_name sdr:model_r2_set_mode
		"AM" sdr:mode_for_name sdr:model_r3_set_mode
		"FM" sdr:mode_for_name sdr:model_tx_set_mode
		"6.0KHz" sdr:filter_for_name sdr:model_r1_set_filter
		"4.0KHz" sdr:filter_for_name sdr:model_r2_set_filter
		"2.4KHz" sdr:filter_for_name sdr:model_r3_set_filter
		"1.0KHz" sdr:filter_for_name sdr:model_tx_set_filter
		"Off" sdr:agc_for_name sdr:model_r1_set_agc
		"Fast" sdr:agc_for_name sdr:model_r2_set_agc
		"Slow" sdr:agc_for_name sdr:model_r3_set_agc
		50 sdr:model_r1_set_afgain
		60 sdr:model_r2_set_afgain
		70 sdr:model_r3_set_afgain
		true sdr:model_tx_set_duplex
		50 sdr:model_tx_set_rfgain
		50 sdr:model_tx_set_micgain
		2 sleep
		sdr:model_tx_get_duplex "Duplex: " swap >s s:+ log
		sdr:model_tx_get_simplex_freq "Simplex freq: " swap >s s:+ log
		sdr:model_tx_get_duplex_freq "Duplex freq: " swap >s s:+ log
		sdr:model_tx_get_simplex_mode "Simplex mode: " swap >s s:+ log
		sdr:model_tx_get_duplex_mode "Duplex mode: " swap >s s:+ log
		sdr:model_tx_get_simplex_filter "Simplex filter: " swap >s s:+ log
		sdr:model_tx_get_duplex_filter "Duplex filter: " swap >s s:+ log
	;

	\ Run one test iteration
	: runtest
		cr cr "Run test: " swap >s s:+ log
		\ Initialise and do SOD etc
		"Initialising" log
		sdr:app_model_init
		"Done initialise" log
		\ Run proc tests
		"Running proc tests" log
		run_proc
		"Done proc tests" log
		\ Close app model to clean up for next iteration
		"Closing model" log
		sdr:app_model_term 
		"AppModel_TASK" fr:wait_single_task 
		"Done closing model" log
	;
	
	\ Run tests on a separate thread
	: run_tests
		t:getq false q:throwing drop
		"TEST_TASK" t:name!
		t:curtask "TEST_TASK" fr:task_reg!
		setup	
		2 sleep
		' runtest 1 5000 loop
		\ Terminate pub/sub
		cr "Closing test..." log
		fr:pubsub_term		
		\ Wait for P/S to terminate
		\ AppModel_TASK already terminated
		"P/S_TASK" fr:wait_single_task 
		"TEST_TASK exiting..." log
	;
	
	\ Test sequence
	"MAIN_TASK" t:name!
	' run_tests t:task
	\ Wait for main task to terminate
	t:wait
	2 sleep
	bye
	
#then
