(* 
	radio_model.8th
 
  Persisted radio state.
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
  
  GEN_SERVER application -
		Model for radio -
			1. The model has a default which is used if there is no persisted model. If there is a persisted
			model this is restored and used as the current model.
			2. The model is saved at end of day and may be saved at other times as a precaution.
			3. This model contains all the data and settings for the radio state. It is used to both populate the
			UI and to set the current values.
*)

\ ========================================
\ Testing only
true var, radio_model_test

\ ----------------------------------
radio_model_test @ #if
	\ Includes
	"../common/app_defs.8th" f:include
	"../common/radio_defs.8th" f:include
	"../common/ps_events.8th" f:include
	"E:/Projects/Framework/trunk/src/8th/gen_server.8th" f:include
	"E:/Projects/Framework/trunk/src/8th/pub_sub.8th" f:include
	"E:/Projects/Framework/trunk/src/8th/persist.8th" f:include
	\ needs debug/sed
	\ true SED-CHECK
	\ needs debug/trace
	\ dbg:line-info
#then
\ ========================================

\ Set namespace
ns: sdr
with: fr.gs
with: fr.ps
with: fr.p

\ ===============================================================================
\ PRIVATE
\ Convention: private words start: 		__conn_
\ 						message handlers start: do_conn_
\							event handlers start: 	__conn_evnt_
\ ===============================================================================

\ ----------------------------------
\ Default app model structure
\ Model data which is used as default when there is no persisted model.
: __radio_model_default
	{
		\ HPSDR Protocol-1 only supports 3 radios
		\ More can be added into the array as required
		"radio-state" : [
			[
				\ src						SoD
				false, [null, false, 
				{
					"freq": 7100000,
					"mode": ` CH_LSB ` ,
					"filter": ` CH_2K4 ` ,
					"agc": ` CH_AGC_MED ` ,
					"attn": ` ATTN_NONE ` ,
					"hf-preamp": ` PRE_OFF ` ,
					"6m-preamp": ` PRE_OFF ` ,
					"audio-gain": 50
				} ]
			],
			[
				\ src						SoD
				false, [null, false, 
				{
					"freq": 7100000,
					"mode": ` CH_LSB ` ,
					"filter": ` CH_2K4 ` ,
					"agc": ` CH_AGC_MED ` ,
					"attn": ` ATTN_NONE ` ,
					"hf-preamp": ` PRE_OFF ` ,
					"6m-preamp": ` PRE_OFF ` ,
					"audio-gain": 50
				} ]
			],
			[
				\ src						SoD
				false, [null, false, 
				{
					"freq": 7100000,
					"mode": ` CH_LSB ` ,
					"filter": ` CH_2K4 ` ,
					"agc": ` CH_AGC_MED ` ,
					"attn": ` ATTN_NONE ` ,
					"hf-preamp": ` PRE_OFF ` ,
					"6m-preamp": ` PRE_OFF ` ,
					"audio-gain": 50
				} ]
			]
			],
			"tx-state" : [
				\ src						SoD
				false, [null, false, 
				{
					"state" :
					{
						"duplex" : false,
						"rf-gain": 50,
						"mic-gain": 50
					},
					\ In simplex mode the TX follows Radio 1 and can't be changed
					"simplex" : 
					{
						\ Copy of the radio 1 values
						"freq": 7100000,
						"mode": ` CH_LSB ` ,
						"filter": ` CH_2K4 `
					},
					\ In duplex mode the TX can be on a different freq/mode/filter than Radio 1
					"duplex" : 
					{
						\ Any allowable combination
						"freq": 7100000,
						"mode": ` CH_LSB ` ,
						"filter": ` CH_2K4 `
					}
				}
			]
		]
	}
;

\ ===============================================================================
\ Model Management

\ ----------------------------------
\ Get model
: __radio_model@	SED: -- m
	\ in: 	none
	\ out:	model
	"radio_model" t:@ 
;

\ ----------------------------------
\ Save model
: __radio_model!	SED: m -- 
	\ in: 	model
	\ out:	none
	"radio_model" t:! 
;
	
\ ----------------------------------
\ Restore model else use the default
: __radio_model_restore	SED: --
	\ in: 	none
	\ out:	none
	\ Restore the application model or use default if no saved model
	__radio_model_default RADIO_MODEL_PATH restore_model_data __radio_model! 
;

\ ----------------------------------
\ Save current model 
: __radio_model_save	SED: --
	\ in: 	none
	\ out:	none
	__radio_model@ RADIO_MODEL_PATH save_model_data drop 
;

\ ===============================================================================
\ Message handlers

\ ========================================
\ Initialisation and termination

\ Initialise the radio model
: t_radio_init	SED: m --
	\ in: 	message
	\ out:	none
	drop __radio_model_restore
;

\ ----------------------------------
\ Send system events
: t_radio_sys_evnts	SED: m --
	\ in: 	message
	\ out:	none
	drop
;

\ ----------------------------------
\ Send UI events
: t_radio_ui_evnts	SED: m --
	\ in: 	message
	\ out:	none
	drop
;

\ ----------------------------------
\ Send SYS events
: __radio_model_sys_evnts	SED: --
	\ in: 	none
	\ out:	none
;

\ ----------------------------------
\ Send UI events
: __radio_model_ui_evnts	SED: --
	\ in: 	none
	\ out:	none
;

\ ----------------------------------
\ Close the app model at task level
: do_app_close	SED: m --
	\ in: 	message
	\ out:	none
	drop __radio_model_save
;

\ ===============================================================================
\ ===============================================================================
\ PUBLIC Call level Interface
\ ===============================================================================

\ ===============================================================================
\ Initialisation and termination of gen-server 

\ ----------------------------------
\ Module initialisation
: radio_model_init	SED: --
	\ in: 	none
	\ out:	none
	
	\ Create the model gen-server
	"RadioModelTask" gen_server_new
	\ Ask the model to initialise itself
	"RadioModelTask" ' t_radio_init null msg!
	\ Send events
	"RadioModelTask" ' t_radio_sys_evnts null msg!
	"RadioModelTask" ' t_radio_ui_evnts null msg!
;

\ ----------------------------------
\ Module close
: radio_model_term	SED: --
	\ in: 	none
	\ out:	none
	\ Tidy close the connector
	"RadioModelTask" gen_server_term
;

\ ========================================
\ Reset namespace
ns: user

\ ===============================================================================
\ ===============================================================================
\ Testing
\ ===============================================================================

radio_model_test @ #if
	with: sdr
	
	4 json-pretty
	
	\ Basic test
	: script
		radio_model_init
		1 sleep
		radio_model_term
		1 sleep
	;
	
	\ Run test and exit
	script
	bye
#then
