(* 
	struct_manip.8th
 
  Parameter storage
 
 Copyright C 2018 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

\ Includes
"param_st.8th"  f:include

\ Set namespace
ns: C

\ ========================================
\ Testing only

needs debug/sed
true SED-CHECK

\ ===============================================================================
\ Private
\ ===============================================================================

\ =========================================================================
\ Getter helpers
\ Dereference the next level in the structure
: level@	SED: * n * -- *
	\ in:		* - key or index to the next element 		
	\				n - index into path array
	\				* - arbitrary structure
	\ out:	* - arbitrary next element, scalar or structure
	\ Drop unwanted index
	nip
	\ Do we have an index or a key
	\ i.e are we looking in a dict or an array
	dup >kind ns:s n:= if	
		\ String, so a map key
		m:@	nip	
	else
		\ Number so an array index
		a:@	nip
	then ;

\ ===============================================================================
\ Public
\ ===============================================================================
\ Getter words
\ Dereference the structure from a path descriptor, returning a field
: val@	SED: * a -- *
	\ in:		* - arbitrary structure	
	\				a - path to an element [s|n, s|n, s|n ...] 	
	\ out:	* - arbitrary element, scalar or structure
	' level@ a:each
	drop ;
 
\	1. Dereference the structure from path-2 to obtain an index value then
\ 2. Dereference the structure from path-1 descriptor then
\ 3. Return the index element
: idx_val@	SED: * a a -- *
	\ in:		a - path-2 to an element to yield an index or an index 	
	\				a - path-1 to an element [s|n, s|n, s|n ...] 
	\				* - arbitrary structure	
	\ out:	* - arbitrary element, scalar or structure
	\ stash params 0:structure 1:path-1 2:path-2
	>p >p >p
	\ Deref using path-2 (index) and stash result to r
	p@ 2 pp@ val@ >r
	\ Deref using path-1
	p@ 1 pp@ val@
	\ Now index the value list returned
	r> a:@
	\ Clean up
	nip ps_clear ;

\ Reset namespace
ns: user

\ ===============================================================================
\ Testing
\ ===============================================================================

ps_alloc
[0, false, ["48000", "96000", "192000"]] [2] C:val@ . cr
[0, false, ["48000", "96000", "192000"]] [2] [0] C:idx_val@ . cr
bye