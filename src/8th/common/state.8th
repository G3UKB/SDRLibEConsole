(*
	state.8th
 
  Current state for the SDRLibEConsole application
 
 Copyright C 2018 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

needs utils/enums

\ ========================================
\ Testing only
false var, state_test
state_test @ #if
	\ Includes
	\ needs debug/sed
	\ true SED-CHECK
#then

\ ========================================
\ Set namespace
ns: sdr

(*
	the current state is the running state of the application that may be required by
	any module. The state is not persistent as it is only relevant to the running instance.
*)

\ ========================================
\ Startup states
0 enum:
	STATE_1
	STATE_2
	STATE_3
	STATE_4
	STATE_5
	STATE_6
enum;

\ ========================================
\ radio types currently supported
0 enum:
	TYPE_HPSDR
	TYPE_FCD
enum;

\ ========================================
{
	"app" : {
		"run-state" : ` STATE_1 `,
		\ Free running mode, may be disabled at certain times
		"run" : false,
		\ Start of day flag
		"sod" : true,
		\ Inhibit UI, don't process UI events as they may be 
		\ internal calls which cause event loops.
		"inhibit" : false
	},
	"server" : {
		\ Server is on-line
		"running" : false
	},
	"radio" : {
		\ Radio is online i.e. discovery was successful	
		"online" : false,
		\ Radio is running, this means radio data is being processed
		"running" : false,
		\ We are currently in TX mode
		"tx" : false,
		\ Radio attributes
		"type" : ` TYPE_HPSDR `,
		"num-rx" : 1
	}
} var, current_state

\ ========================================
\ Multiple readers/writers so structure must be locked
: st_lock@
	current_state lock @ ;
	
: st_unlock
	current_state unlock drop ;

\ ========================================
\ Get/Set words

\ Get section
: st_app@	SED: m -- m
	"app" m:@ ;

: st_server@	SED: m -- m
	"server" m:@ ;

: st_radio@	SED: m -- m
	"radio" m:@ ;
	
\ ----------------------------------	
\ Application
: st_app_run_state@	SED: -- n
	st_lock@ st_app@ "run-state" m:@ nip nip st_unlock ; 
	
: st_app_run_state!	SED: n  --
	st_lock@ st_app@ nip "run-state" rot m:! drop st_unlock ; 
	
: st_app_run@	SED: -- T
	st_lock@ st_app@ "run" m:@ nip nip st_unlock ; 
	
: st_app_run!	SED: T --
	st_lock@ st_app@ nip "run" rot m:! drop st_unlock ; 

: st_app_sod@	SED: -- T
	st_lock@ st_app@ "sod" m:@ nip nip st_unlock ; 
	
: st_app_sod!	SED: T --
	st_lock@ st_app@ nip "sod" rot m:! drop st_unlock ;
	
: st_app_inhibit@	SED: -- T
	st_lock@ st_app@ "inhibit" m:@ nip nip st_unlock ; 
	
: st_app_inhibit!	SED: T --
	st_lock@ st_app@ nip "inhibit" rot m:! drop st_unlock ; 

\ ----------------------------------	
\ Server
: st_svr_running@	SED: -- T
	st_lock@ st_server@ "running" m:@ nip nip st_unlock ; 
	
: st_svr_running!	SED: T --
	st_lock@ st_server@ nip "running" rot m:! drop st_unlock ; 

\ ----------------------------------	
\ Radio
: st_rad_online@	SED: -- T
	st_lock@ st_radio@ "online" m:@ nip nip st_unlock ; 
	
: st_rad_online!	SED: T --
	st_lock@ st_radio@ nip "online" rot m:! drop st_unlock ; 

: st_rad_running@	SED: -- T
	st_lock@ st_radio@ "running" m:@ nip nip st_unlock ; 
	
: st_rad_running!	SED: T --
	st_lock@ st_radio@ nip "running" rot m:! drop st_unlock ;

: st_rad_tx@	SED: -- T
	st_lock@ st_radio@ "tx" m:@ nip nip st_unlock ; 
	
: st_rad_tx!	SED: T --
	st_lock@ st_radio@ nip "tx" rot m:! drop st_unlock ;

: st_rad_type@	SED: -- n
	st_lock@ st_radio@ "type" m:@ nip nip st_unlock ; 
	
: st_rad_type!	SED: n --
	st_lock@ st_radio@ nip "type" rot m:! drop st_unlock ;

: st_rad_num_rx@	SED: -- n
	st_lock@ st_radio@ "num-rx" m:@ nip nip st_unlock ; 
	
: st_rad_num_rx!	SED: n --
	st_lock@ st_radio@ nip "num-rx" rot m:! drop st_unlock ;

\ ----------------------------------	
\ Helpers
\ Wait for a run_state to be triggered
: wait_run_state SED: n --
	>r
	repeat 
		st_app_run_state@ r@ n:= if break else 0.05 sleep then 
	again 
	rdrop ;

\ ========================================	
\ Restore namespace	
ns: user 

\ ===============================================================================
\ ===============================================================================
\ Testing
\ ===============================================================================
state_test @ #if
	
	: run_test
	
		false sdr:st_app_run!
		false sdr:st_app_sod!
		false sdr:st_app_inhibit!
		
		false sdr:st_svr_running!
		
		false sdr:st_rad_online!
		false sdr:st_rad_running!
		false sdr:st_rad_tx!
		sdr:TYPE_HPSDR sdr:st_rad_type!
		
		sdr:st_app_run@ "Run: " swap >s s:+ log
		sdr:st_app_sod@ "SOD: " swap >s s:+ log
		sdr:st_app_inhibit@ "Inhibit: " swap >s s:+ log
		
		sdr:st_svr_running@ "Server: " swap >s s:+ log
		
		sdr:st_rad_online@ "Online: " swap >s s:+ log
		sdr:st_rad_running@ "Running: " swap >s s:+ log
		sdr:st_rad_tx@ "TX: " swap >s s:+ log
		sdr:st_rad_type@ "Type: " swap >s s:+ log

		true sdr:st_app_run!
		true sdr:st_app_sod!
		true sdr:st_app_inhibit!
		
		true sdr:st_svr_running!
		
		true sdr:st_rad_online!
		true sdr:st_rad_running!
		true sdr:st_rad_tx!
		sdr:TYPE_FCD sdr:st_rad_type!

		sdr:st_app_run@ "Run: " swap >s s:+ log
		sdr:st_app_sod@ "SOD: " swap >s s:+ log
		sdr:st_app_inhibit@ "Inhibit: " swap >s s:+ log
		
		sdr:st_svr_running@ "Server: " swap >s s:+ log
		
		sdr:st_rad_online@ "Online: " swap >s s:+ log
		sdr:st_rad_running@ "Running: " swap >s s:+ log
		sdr:st_rad_tx@ "TX: " swap >s s:+ log
		sdr:st_rad_type@ "Type: " swap >s s:+ log
	;
	
	: run_tests
		"***TEST***: " swap >s s:+ log
		' run_test t:task
	;
	
	' run_tests 1 50 loop
 	10 sleep
 	
	bye
#then