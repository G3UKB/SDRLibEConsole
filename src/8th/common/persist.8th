(*
	persist.8th
 
  Models save/restore for the SDRLibEConsole application
 
 Copyright C 2018 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

\ ============================================================================

\ ========================================
\ Testing only
false var, persist_test

persist_test @ #if
	\ Includes
	\ needs debug/sed
	\ true SED-CHECK
#then
\ ========================================

\ Set namespace
ns: sdr

\ ===============================================================================
\ File names
: APP_MODEL_FILENAME "app-model.cfg" ;

\ ----------------------------------
\ Step path back n directory levels
: pbk	SED: s n -- s
	\ in: 	0: n - number of levels to step back
	\ 			1: s - given path
	\ out:	new path
	repeat
		swap ".." s:+
		f:sep s:+ swap n:1- 
	while 
	drop
;

\ ----------------------------------
\ Find 8th directory index in path components array
: levels	\ SED: n s -- s n | empty SED: can't cope with this
	\ in: 	0: s - directory
	\ 			1: n - idx
	\ out:	0: s - directory	(match)
	\				1: n - idx
	\				OR empty					(no match)
	dup "8th" s:= if break
	else 2drop then
;

\ ----------------------------------
\ Create fully qualified path
: create_model_path	SED: s -- *
	\ in: 	0: s - filename
	\ out:	0: s - qualified path | null
	\ Separate the current working directory into a path component array
	getcwd "" f:sep s:+ s:/ 
	\ Iterate the array and return the level idx of /8th in the array
	' levels a:each							\ filename idx directory array
	1 pick "8th" s:= if
		\ Calc number of levels /8th is back from the current directory
		a:len nip nip swap n:- 1 n:-	 	\ filename	n-levels
		\ Get relative path back to 8th
		"" swap pbk											\ e.g. "..\..\"
		\ Get fully qualified path to conf file
		"conf" s:+ f:sep s:+ swap s:+		\ qualified-path
	else
		\ Failed to find /8th directory
		2drop null
	then
;

\ ----------------------------------	
\ Create model file
: create_model_file	SED: s -- s
	\ in: 	0: s - model path
	\ out:	0: s - model path
	dup f:create f:close
;

\ ----------------------------------
\ Save model data as a Json string
: save_model_data	SED: * s -- s
	\ in: 	0: s - model path
	\				1: * - model data
	\ out:	0: s - model path
	dup f:open rot >json f:write drop f:close 
;

\ ----------------------------------
\ Restore model data and convert to 8th data
: restore_model_data	SED: s -- *
	\ in: 	0: s - model path
	\ out:	0: * - model data | null
	f:slurp null? if null else json> then 
;

\ ========================================
\ Restore namespace	
ns: user

\ ===============================================================================
\ Testing
\ ===============================================================================
persist_test @ #if

	: run_test	
		"test_model.txt" sdr:create_model_path null? if
			"Failed to locate model directory. Path must contain /8th" throw
		else
			sdr:create_model_file
			[1,2,3,4] swap sdr:save_model_data
			sdr:restore_model_data . cr
		then
	;

	run_test
	bye
#then	

