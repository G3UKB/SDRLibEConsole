(* 
	vfo_frag.test.8th
 
  Test harness for vfo.8th
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
 *)
 
\ ========================================
\ Includes
"E:/Projects/Framework/trunk/src/8th/gen_server.8th" f:include
"E:/Projects/Framework/trunk/src/8th/pub_sub.8th" f:include
"../../common/app_defs.8th" f:include
"../../common/radio_defs.8th" f:include
"../../common/ps_events.8th" f:include
"../../common/run_state.8th" f:include
"../../connector/connector.8th" f:include
"../../connector/radio_sequencer.8th" f:include
"../../harness/harness.8th" f:include
"../common/layout.8th" f:include
"../common/font_cache.8th" f:include
"../common/g_cache.8th" f:include
"../components/vfo.8th" f:include
"../fragments/vfo_frag.8th" f:include

\ ========================================
\ Debug Settings
\ needs debug/sed
\ true SED-CHECK
\ needs debug/trace
\ dbg:line-info

\ ========================================
\ Test code
with: sdr
with: fr.gs
with: fr.ps
with: harness

4 json-pretty
true app:isgui !

\ This is VFO fragment using the VFO component.
\ 1. It publishes frequency changes to SYS_R1_FREQ. We must have a gen-server that
\			subscribes to SYS_R1_FREQ. to receive the events.
\ 2. It subscribes to frequency changes which may come from the model at initialisation
\			or a band change or click-frequency etc. We must have a task that publishes
\			some frequency changes to test the subscription. This does not have to be a gen-server
\			as it can just push publications.

\ ========================================
\ These are gen_server words for the EVNT_TASK gen_server

\ ----------------------------------
\ Called by published frequency changes
: evnt_freq
	0 a:@ nip log
;

\ ----------------------------------
\ Called from a gen_server message to subscribe to the frequency change
: evnt_subscribe
	t:name@ ' evnt_freq SYS_R1_FREQ subscribe
;

\ ========================================
\ Startup/terminate

\ Once app:isgui is set true the main task will no longer respond to events such as t:notify
\ If we create a gen_server on the main task of a GUI app it will hang on the -1 sleep
\ never seeing the notify.
\ We srart the gen_server here in a separate startup task.
: startup_task
	\ Create gen_server
	"EVNT_TASK" gen_server_new
	\ Tell it to do subscriptions
	"EVNT_TASK" ' evnt_subscribe null msg!
	\ Wait until told to close at EOD so refs are maintained
	-1 sleep
	"Startup task exiting..." log
	0.1 sleep
;

\ ----------------------------------
\ onexit callback
: term_callback
	\ Else messages get lost
	false log-async
	\ Terminate gen_server
	"EVNT_TASK" gen_server_term
	0.1 sleep
	\ Terminate startup task
	"startup_task" t:@ dup t:notify t:wait
	\ Wait for tasks to go
	wait_all
	\ Messages flush
	0.1 sleep
;

\ ========================================
\ Send periodic updates
: update_task
	\ Send frequency updates
	repeat
		5 sleep
		[10000000] UI_R1_FREQ publish drop
	again
;

\ ----------------------------------
\ Entry point 
\ Create a test window and add the vfo
: app:main
	\ Create startup task and keep reference
	' startup_task t:task "startup_task" t:!
	\ Set exit handler
	' term_callback onexit
	\ Create a basic window
	harness_basic_window
	\ Create the vfo
	VFO-1 "0,0,300,50" vfo_frag_new
	\ Add to the window
	"win" t:@ swap g:+child
	\ VFO update task
	' update_task t:task "update_task" t:!
;