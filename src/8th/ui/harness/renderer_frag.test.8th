(* 
	renderer_frag.test.8th
 
  Test harness for renderer_frag.8th
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
 *)
 
\ ========================================
\ Includes
"E:/Projects/Framework/trunk/src/8th/gen_server.8th" f:include
"E:/Projects/Framework/trunk/src/8th/pub_sub.8th" f:include
"../../common/app_defs.8th" f:include
"../../common/radio_defs.8th" f:include
"../../common/ps_events.8th" f:include
"../common/layout.8th" f:include
"../common/font_cache.8th" f:include
"../common/g_cache.8th" f:include
"../../connector/connector.8th" f:include
"../common/render_if.8th" f:include
"../../harness/harness.8th" f:include
"../../display_builder/disp_context.8th" f:include
"../../display_builder/disp_defs.8th" f:include
"../../display_builder/disp_calc.8th" f:include
"../../display_builder/disp_encoder.8th" f:include
"../../display_builder/disp_events.8th" f:include
"../common/render_context.8th" f:include
"../components/renderer.8th" f:include
"../fragments/renderer_frag.8th" f:include

\ ========================================
\ Debug Settings
\ needs debug/sed
\ true SED-CHECK
\ needs debug/trace
\ dbg:line-info

\ ========================================
\ Test code
with: sdr
with: fr.gs
with: fr.ps
with: harness

4 json-pretty
true app:isgui !

\ ========================================
\ Startup

\ Once app:isgui is set true the main task will no longer respond to events such as t:notify
\ If we create a gen_server on the main task of a GUI app it will hang on the -1 sleep
\ never seeing the notify.
\ We srart the gen_server here in a separate startup task.
: startup_task
	\ Set up the receiver to get a data stream
	harness_reg_task
	\ These use direct sends
	\ Initialise connector
	harness_init_connector
	1 sleep
	\ Start the radio
	harness_start_radio

	"START DISPLAY" log
	disp_evnt_init
	1 sleep
	"SENDING EVENTS" log
	[7100000] null +sender SYS_R1_FREQ publish drop
	[[500,200]] null +sender SYS_R1_WIN_METRICS publish drop
	[[480,180]] null +sender SYS_R1_DISP_METRICS publish drop
	1 sleep
	"RUN DISP" log
	DISP_EVNT_TASK ' t_disp_evnt_set_disp_period [100] null +sender msg!
	DISP_EVNT_TASK ' t_disp_evnt_set_disp_state [[false,false,true]] null +sender msg!

	\ Wait until told to close at EOD so refs are maintained
	-1 sleep
	"Startup task exiting..." log
	0.1 sleep
;

\ ----------------------------------
\ onexit callback
: term_callback
	\ Else messages get lost
	false log-async
	conn_term
	disp_evnt_term
	\ Terminate startup task
	"startup_task" t:@ dup t:notify t:wait
	wait_all
	\ Messages flush
	0.1 sleep
;

\ ========================================
\ Test program entry point
: app:main
	1 __renderer_data_new
	1 __renderer_set_id
	\ Create an empty wondow
	harness_basic_window
	\ Create the test renderer
	DISP-1 "0,0,500,200" render_frag_new dup
	\ Add to the window
	rot swap g:+child
	\ Initialise
	1 pick renderer_init
	
	\ Create startup task and keep reference
	' startup_task t:task "startup_task" t:!

	\ Set exit handler
	' term_callback onexit

	\ Enter event loop
;