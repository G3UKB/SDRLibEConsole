(*
	widget_common.8th
 
  References and helper words that must be included first in the UI area
 
 Copyright C 2017 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

\ Set namespace
ns: sdr

\ ===============================================================================
\ The GUI main window variable
var main_window

\ ===============================================================================
\ The GUI tx window variable
var tx_window

\ ===============================================================================
\ The GUI WBS window variable
var wbs_window

\ ===============================================================================
\ The GUI Alex window variable
var alex_window


\ ===============================================================================
\ The GUI options variable
var options

\ ===============================================================================
\ Helpers
\ Get the target gui reference
: get_target				\	tab target-widget-name -- g-target-widget
	options @					\ tab target-widget-name options_tab_obj 
	"options"					\ tab target-widget-name options_tab_obj "options"
	g:child 					\ tab target-widget-name the-options-gui
	rot								\ target-widget-name the-options-gui tab
	g:get-tab					\ target-widget-name the-options-gui target-tab
	nip 							\ target-widget-name target-tab
	swap							\ target-tab target-widget-name
	g:child						\ child-widget
;

\ Add item into a combo list
: add_combo_item			\ g-target-widget array_obj_ref value item -- g-target-widget
	3 pick							\ g-target-widget array_obj_ref value item g-target-widget
	swap								\ g-target-widget array_obj_ref value g-target-widget item
	g:list+							\ g-target-widget array_obj_ref value g-target-widget
	2drop
;

\ Iff start-of-day clear the combo and add all items from the model
: update_combo_items 			\	g-target-widget array_obj_ref -- array_obj_ref
	sdr:is_sod 							\ g-target-widget array_obj_ref flag
	if
		\ Start of day
		\ Populate the combo
		2 a:@									\ g-target-widget array_obj_ref item_array
		2 pick g:clear drop		\ g-target-widget array_obj_ref item_array
		' add_combo_item  		\ g-target-widget array_obj_ref item_array add_combo_item
		a:each								\ g-target-widget array_obj_ref item_array item
		drop									\ g-target-widget array_obj_ref
	then
	
;

\ Update combo list and select as of last index value in model
: update_combo 						\	array_obj_ref value tab target-name -- array_obj_ref
	get_target 							\ array_obj_ref value g-target-widget
	rot											\ value g-target-widget array_obj_ref
	update_combo_items 			\ value g-target-widget array_obj_ref
	swap										\ value array_obj_ref g-target-widget
	rot											\ array_obj_ref g-target-widget value
	\ Set selected index of combo
	g:select!								\ array_obj_ref g-target-widget
	drop										\ array_obj_ref
;

\ Update toggle as of last value in model
: update_toggle 					\	value tab target-name -- 
	get_target							\ value g-target-widget r:tab
	swap										\ g-target-widget value
	\ Set toggle value
	g:on										\ g-target-widget
	drop										\ -- 
;

\ Update slider as of last value in model
: update_slider 					\	value tab target-name -- 
	get_target							\ value g-target-widget
	swap										\ g-target-widget value
	g:set-value
	drop										\ -- 
;

\ Get a gui reference to a tab
: get_tab_target		\	tab target_name -- gui
	get_target nip
;

\ Get a gui reference to a radio panel button widget of id
: get_window_target		\ radio id -- g
	main_window @ dup "concertina" g:child 3 pick g:child 2 pick g:child
	nip nip nip
;

\ Get a gui reference to a radio panel label widget of id
: get_label_target		\ radio id -- g
	main_window @ dup "concertina" g:child	\ radio id w g.concertina 
	3 pick g:child 					\ radio id w g.radio 
	0 g:child 0 g:child			\ radio id w g.container
	2 pick g:child					\ radio id w g.widget 
	nip nip nip
;

\ Toggle a popup button box
: toggle_popup_panel	\ g-target g-btn -- g-target
	g:on? nip
	if
		g:show
	else
		g:hide
	then
;

\ ============================================================================
\ Json GUI def helpers

\ Page level
{
	"dir" : "",
	"wrap" : "nowrap",
	"align" : "start",
	"alignitems" : "start",
	"justify" : "start"
} var, flex_page

\ Widget level
{
	"width" : 0, 
	"height" : 0,
	"margin" : [2, 5, 0, 5],
	"grow" : 0,
	"shrink" : 0
} var, flex_widget

\ Set up a flex box definition
: flex_do_box	\ direction -- flex_page (clone updated)
	flex_page @ clone "dir" 3 pick m:! swap drop swap drop 
;

\ Set up a flex widget definition
: flex_do_widget 	\ width height -- flex_widget (clone updated)
	flex_widget @ clone "width" 4 pick m:! "height" 3 pick m:! swap drop swap drop swap drop 
;

\ Convert a % bounds definition to a pixel bounds definition
: do_bounds	\	%left %top %right %bottom -- pix-left pix-top pix-right pix-bottom
	100 / swap 		\ bottom
	100 / 2swap		\ right
	100 / swap 		\ top
	100 /  				\ left
	"parent.width*%f,parent.height*%f,parent.width*%f,parent.height*%f" s:strfmt 
;

\ Font cache as creating fonts after 18.03 is VERY expensive
: mysetfont \ name -- font
  \ font cache:
  {}
  \ name map
  over
  \ name map name
  m:@ null? if
    drop
    \ name map
    over font:new
    \ name map font
    dup >r
    rot swap m:! drop
  else
    \ name map font
    >r 2drop
  then
  r> const
  g:setfont ;
  
\ Restore namespace	
ns: user