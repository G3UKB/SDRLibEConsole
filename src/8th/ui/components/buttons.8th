(*
	buttons.8th
 
  Buttons component for the SDRLibEConsole application
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
     
  This component can be multi-instanced to provide an array of buttons in a 
  container with given layout matrix.
*)

needs stack/3drop

\ ========================================
\ Testing only
false var, buttons_test

\ ----------------------------------
buttons_test @ #if
	\ Includes
	"../common/g_cache.8th" f:include
	\ needs debug/sed
	\ true SED-CHECK
	\ needs debug/trace
	\ dbg:line-info
#then
\ ========================================

\ Use SDR namespace
ns: sdr
with: fr.gs
with: fr.ps

\ ========================================
\ Variables

\ ----------------------------------
\ Semi-populated box to hold buttons
{
	"kind" : "box",
	"alpha" : 1.0,
	"bg" : "lightcyan4",
	"visible" : true
} var, button_panel

\ ===============================================================================
\ PRIVATE
\	Convention: all private words start __
\ ===============================================================================

\ ----------------------------------
\ Add one button child to the child array
\ child-array [label user-data, click] -- child-array
: __add_child	SED: a a -- a
	swap >r a:open
	m:new
	"kind" "btn" m:!
	"click" rot m:!
	"user-data" rot m:!
	"label" rot m:!
	"font" 14 m:!
	"bg" "lightcyan4" m:!
	"fg" "blue" m:!
	"alpha" 0.8 m:!
	r> swap a:push
;

\ ----------------------------------
\ Make the child array
\ button-spec -- child-array
: __make_children	SED: a -- a
	a:new swap ' __add_child a:each! drop
;

\ ----------------------------------
\ Get item from spec map
\ button-spec item-name -- item
: __get_item_from_spec SED: m s -- *
	m:@ nip
;

\ ----------------------------------
\ Get item from spec map
\ button-spec item -- item
: __store_item_to_panel SED: item key --
	button_panel @ swap rot m:! drop
;

\ ===============================================================================
\ PUBLIC
\ ===============================================================================

\ ============================================================================
\ Initialisation

\ ----------------------------------
\ Create a new button box according to the spec
\ button-spec  -- gui
: new_button_box	SED: m -- g
	\ Add attributes to panel
	>r
	m:new
	"rows" r@ "rows" __get_item_from_spec m:!
	"cols" r@ "cols" __get_item_from_spec m:! 
	"grid" __store_item_to_panel
	r@ "id" __get_item_from_spec "id" __store_item_to_panel
	r@ "bounds" __get_item_from_spec "bounds" __store_item_to_panel
	
	\ Add button children to panel
	r@ "spec" __get_item_from_spec __make_children "children" __store_item_to_panel
	\ Make it a new gui panel
	button_panel @ const g:new
	dup r> "id" __get_item_from_spec swap g_cache_add
;

\ ===============================================================================
\ Restore namespace	
ns: user	

\ ===============================================================================
\ ===============================================================================
\ Testing
\ ===============================================================================

buttons_test @ #if
	with: sdr
	with: fr.gs
	with: fr.ps
	
	true app:isgui !
	4 json-pretty

	\ ----------------------------------
	\ Called as given by spec
	\ Generally the user data will be required
	\ g -- g
	: button_click	SED: g -- g
		"user-data" g:m@ . cr
	;

	\ ----------------------------------
	\ This call would be made from the application to create a new button box from the spec.
	\ --
	: make_component	SED: -- g
		{
			"id" : "BB1",
			"bounds" : "0,0,200,200",
			"rows" : 3, 
			"cols" : 3,
			"spec" : [
				["160", 1900000, ' button_click ],
				["80", 3700000, ' button_click ],
				["60", 5276000, ' button_click ],
				["40", 7100000, ' button_click ],
				["30", 10200000, ' button_click ],
				["20", 14200000, ' button_click ],
				["17", 18100000, ' button_click ],
				["15", 21200000, ' button_click ],
				["10", 29000000, ' button_click ]
			] 
		} new_button_box
	;

	\ ----------------------------------
	\ Entry point 
	\ Create a test window and add the button box
	: app:main

			\ A minimal window to hold our test component
			{
				"kind" : "win",
				"title" : "ButtonBox",
				"visible" : true,
				"ontop" : false,
				"bg" : "gray10",
				"resize-corner" : 20,
				"wide" : 400,
				"high" : 200,
				"top" : 100,
				"left" : 100,
				"children" : []
			} g:new dup "win" t:!
			\ Create the test button box
			make_component
			\ Add to the window
			"win" t:@ swap g:+child	 
	;
#then