(*
	buttons.8th
 
  Buttons component for the SDRLibEConsole application
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
     
  This component can be multi-instanced to provide an array of buttons in a 
  container with given layout matrix.
*)

needs stack/3drop

\ Use SDR namespace
ns: sdr
with: fr.gs
with: fr.ps

\ ========================================
\ Variables

\ ----------------------------------
\ Semi-populated box to hold buttons
{
	"kind" : "box",
	"alpha" : 1.0,
	"bg" : "gray10",
	"visible" : true
} var, button_panel

\ ===============================================================================
\ PRIVATE
\	Convention: all private words start __
\ ===============================================================================

\ ----------------------------------
\ Add one button child to the child array
\ child-array [label user-data, click] -- child-array
: __add_child	SED: a a -- a
	swap >r a:open
	m:new
	"kind" "btn" m:!
	"click" rot m:!
	"user-data" rot m:!
	"autotoggle" true m:!
	"group" 1 m:!
	"label" rot m:!
	"font" 14 m:!
	"bg" "gray0" m:!
	"fg" "gold4" m:!
	"bg0" "gray20" m:!
	"fg0" "gold3" m:!
	"alpha" 0.8 m:!
	r> swap a:push
;

\ ----------------------------------
\ Make the child array
\ button-spec -- child-array
: __make_children	SED: a -- a
	a:new swap ' __add_child a:each! drop
;

\ ----------------------------------
\ Get item from spec map
\ button-spec item-name -- item
: __get_item_from_spec SED: m s -- *
	m:@ nip
;

\ ----------------------------------
\ Store item to button_panel
\ button-spec-item item-name -- 
: __store_item_to_panel SED: * s --
	button_panel @ swap rot m:! drop
;

\ ===============================================================================
\ PUBLIC
\ ===============================================================================

\ ============================================================================
\ Initialisation

\ ----------------------------------
\ Create a new button box according to the spec
\ button-spec  -- gui
: new_button_box	SED: m -- g
	\ Add attributes to panel
	>r
	m:new
	"rows" r@ "rows" __get_item_from_spec m:!
	"cols" r@ "cols" __get_item_from_spec m:! 
	"grid" __store_item_to_panel
	r@ "id" __get_item_from_spec "id" __store_item_to_panel
	r@ "bounds" __get_item_from_spec "bounds" __store_item_to_panel
	
	\ Add button children to panel
	r@ "spec" __get_item_from_spec __make_children "children" __store_item_to_panel
	\ Make it a new gui panel
	button_panel @ const g:new
	dup r> "id" __get_item_from_spec swap g_cache_add
;

\ ===============================================================================
\ Restore namespace	
ns: user	
