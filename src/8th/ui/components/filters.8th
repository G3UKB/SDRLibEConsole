(*
	filters.8th
 
  Filter buttons component for the DynamicSDR application
 
 Copyright C 2017 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

\ Use SDR namespace
ns: sdr

: filter-children \ -- arr
  a:new
  (
    >r																							\ --	r:ix
    m:new																						\ m
      "kind" "btn" m:!															\ m[+ "kind"]
      "label" r> dup >r filter_lookup 2 a:@ nip m:!	\ m[+ "label"] r:ix mode
      "mode-id" r> filter_for_name m:!							\ m[+ "filter_id"]
      "font" 14 m:!																	\ etc
      "bg" "lightcyan4" m:!
      "fg" "blue" m:!
      "alpha" 0.8 m:!
      "click" "sdr:new_filter" m:!
    a:push
    \ Loop size must agree with the grid space
  ) 0 8 loop 
;

\ Be nice to use a new kind but layouts not supported yet 
{
	"kind" : "box",
	"alpha" : 0.5,
	"bg" : "lightcyan4",
	"visible" : false,
	"grid" : {"cols" : 9 , "rows" : 1 },
	"children" : ` filter-children `
} var, filter_panel

\ ============================================================================
\ GUI Events
\ Set the filter text in the status area
: set_filter_text_r1		\ parent filter -- parent g.filter
	1 pick g:parent  			\ parent filter g.radio
	0 g:child 0 g:child		\ parent filter g.container
	"r1-filt-lbl" g:child \ parent filter g.filter
	swap g:text						\ parent g.filter 
;

: set_filter_text_r2		\ parent filter -- parent g.filter
	1 pick g:parent  			\ parent filter g.radio
	0 g:child 0 g:child		\ parent filter g.container
	"r2-filt-lbl" g:child \ parent filter g.filter
	swap g:text						\ parent g.filter 
;

: set_filter_text_r3		\ parent filter -- parent g.filter
	1 pick g:parent  			\ parent filter g.radio
	0 g:child 0 g:child		\ parent filter g.container
	"r3-filt-lbl" g:child \ parent filter g.filter
	swap g:text						\ parent g.filter 
;

: set_filter_text_tx		\ parent filter -- parent g.filter
	1 pick g:parent  			\ parent filter g.radio
	0 g:child 0 g:child		\ parent filter g.container
	"tx-filt-lbl" g:child \ parent filter g.filter
	swap g:text						\ parent g.filter 
;

\ Set the text after a filter selection
: filter_set_text	\ parent filter id --
	{"FILTER-R1": ' set_filter_text_r1 , "FILTER-R2": ' set_filter_text_r2 , "FILTER-R3": ' set_filter_text_r3 , "FILTER-TX": ' set_filter_text_tx }
	case
	drop
;

: set_filter_model_r1
	filter_for_name model_r1_set_filter
;

: set_filter_model_r2
	filter_for_name model_r2_set_filter
;

: set_filter_model_r3
	filter_for_name model_r3_set_filter
;

: set_filter_model_tx
	filter_for_name model_tx_set_filter
;

: filter_set_model	\ parent mode id --
	{"FILTER-R1": ' set_filter_model_r1 , "FILTER-R2": ' set_filter_model_r2 , "FILTER-R3": ' set_filter_model_r3 , "FILTER-TX": ' set_filter_model_tx }
	case
;

: toggle_filter_off_r1	\ parent --
	"r1-filter-btn" g:child false g:on
;

: toggle_filter_off_r2	\ parent --
	"r2-filter-btn" g:child false g:on
;

: toggle_filter_off_r3	\ parent --
	"r3-filter-btn" g:child false g:on
;

: toggle_filter_off_tx	\ parent --
	"tx-filter-btn" g:child false g:on
;

\ Common GUI event for mode click
: new_filter	\ g --
	\ Get the button text
	g:text? >r
	\ Hide the button box
	g:parent g:hide
	\ Get the radio id
	"id" g:m@ >r
	1 rpick 0 rpick filter_set_text
	r> r> 1 pick filter_set_model
	\ Set toggles off on master filter buttons
	swap g:parent swap
	{ "FILTER-R1": ' toggle_filter_off_r1 , "FILTER-R2": ' toggle_filter_off_r2 , "FILTER-R3": ' toggle_filter_off_r3 , "FILTER-TX": ' toggle_filter_off_tx }
	case
;

\ ============================================================================
\ Subscriber Events
: filt_evt_r1_filt	\ a --
	\ "filt_evt_r1_filt" log
	"radio-1" "FILTER-R1" get_window_target swap
	"filter" m:@ nip filter_lookup 2 a:@ nip
	"FILTER-R1" filter_set_text drop
;
	
: filt_evt_r2_filt	\ a --
	\ "filt_evt_r2_filt" log
	"radio-2" "FILTER-R2" get_window_target swap
	"filter" m:@ nip filter_lookup 2 a:@ nip
	"FILTER-R2" filter_set_text drop
;

: filt_evt_r3_filt	\ a --
	\ "filt_evt_r3_filt" log
	"radio-3" "FILTER-R3" get_window_target swap
	"filter" m:@ nip filter_lookup 2 a:@ nip
	"FILTER-R3" filter_set_text drop
;

: filt_evt_tx_filt	\ a --
	\ Switch on the duplex state
	"state" m:@ "duplex" m:@ nip if
		\ Duplex - TX filter independent
		"duplex" m:@
	else
		\ Simplex - TX filter follows radio 1
		"simplex" m:@ 
	then
	\ Update GUI and set the filter
	nip nip dup
	tx_window @ "tx-box" g:child "FILTER-TX" g:child swap
	"filter" m:@ nip filter_lookup 2 a:@ nip
	"FILTER-TX" filter_set_text drop
;

\ ============================================================================
\ Create a band button panel
: filter_panel_new						\ id bounds -- new-filter-gui
	filter_panel @ G:clone nip	\ id bounds filter-clone
	"id" 3 pick m:!
	"name" 3 pick m:! 
	"bounds" 2 pick m:!
	nip nip g:new
;

\ Initialise a filter panel instance
: filter_panel_init	\  gui -- gui
;

\ Subscribe to available radios
: filter_subscribe_radios_1
	UI_R1_FILT ' filt_evt_r1_filt pubsub_subscribe
	UI_TX_FILT ' filt_evt_tx_filt pubsub_subscribe
	SYS_TX_FILT ' filt_evt_tx_filt pubsub_subscribe
;

: filter_subscribe_radios_2
	UI_R1_FILT ' filt_evt_r1_filt pubsub_subscribe
	UI_R2_FILT ' filt_evt_r2_filt pubsub_subscribe
	UI_TX_FILT ' filt_evt_tx_filt pubsub_subscribe
	SYS_TX_FILT ' filt_evt_tx_filt pubsub_subscribe
;

: filter_subscribe_radios_3
	UI_R1_FILT ' filt_evt_r1_filt pubsub_subscribe
	UI_R2_FILT ' filt_evt_r2_filt pubsub_subscribe
  UI_R3_FILT ' filt_evt_r3_filt pubsub_subscribe
  UI_TX_FILT ' filt_evt_tx_filt pubsub_subscribe
	SYS_TX_FILT ' filt_evt_tx_filt pubsub_subscribe
;

: filter_subscribe	\  --
  \ Subscribe to events
	[ ' filter_subscribe_radios_1 , ' filter_subscribe_radios_2 , ' filter_subscribe_radios_3 ]
	swap caseof
;

\ Restore namespace	
ns: user	
