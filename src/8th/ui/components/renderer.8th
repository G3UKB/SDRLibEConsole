(*
	renderer.8th
 
  Display renderer component for the SDRLibEConsole application
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
     
  This display component can be multi-instanced to provide a renderer for the pan
  and waterfall displays.
  
*)

needs stack/3drop

\ Use SDR namespace
ns: sdr
with: fr.gs
with: fr.ps

\ ===============================================================================
\ PRIVATE
\ Convention: private words start: 		__svr_evnt_
\ ===============================================================================

\ ===============================================================================
\ Display panel per radio fits inside its parent.
\ The panadapter is the top variable size display with a fixed hight waterfall below.
{
	\ ----------------------------------
	\ Panel def
	"kind" : "box",
	"bg" : "gray10",
	
	\ ----------------------------------
	\ Parameters
	\ name, id and bounds provided by renderer_new operation
	"name" : "display-name",
	"id" : "display-id",
	"bounds" : "0,0,parent.width, parent.height",
	
	\ ----------------------------------
	\ Renderer events
	"draw" : "sdr:__renderer_draw_all",
	"size" : "sdr:disp_size",
	\ "mouse-moved" : "sdr:mouse_move",
	\ "mouse-down" : "sdr:mouse_down",
	\ "mouse-enter" : "sdr:mouse_enter",
	\ "mouse-exit" : "sdr:mouse_exit",
	\ "timer-period" : 100,
	\ "timer" : "sdr:disp-timer"
	
	\ ----------------------------------
	\ User data
	\ Metrics
	"panel-metrics" : [500,200],			\ Panel into which all drawing is performed
	"client-metrics" : [480,180],			\ Client area to draw dynamic content
	"mouse-pos" : [0,0],							\ Current mouse position for click tune
	\ Image
	\ ToDo: must be resized correctly.
	"wf-img" : ` 450 100 img:new ` ,	\ Image data for waterfall
	\ Radio state											
	"mid-freq" : 7100000,							\ This radio mid freq for freq scale
	"mode" : 0,												\ This radio mode
	"filter" : 0											\ This radio filter	
} var, __renderer_disp_panel

\ ===============================================================================
\ Grid and Labels Drawing
\ ===============================================================================

\ ----------------------------------
\ Draw horizontal/vertical label
: __renderer_draw_label	SED: g n a -- g
	\ in: 	0: a - text descriptor [text,x,y]
	\				1: n - idx
	\				2: g - gui
	\ out:	0: g - gui
	nip
	1 a:@ 
	swap 2 a:@
	swap 0 a:@
	nip
	g:draw-text-at 
;
	
\ ----------------------------------
\ Add horizontal/vertical grid line to path
: __renderer_doline	SED: g n a -- g
	\ in: 	0: a - fixed_data_itm [x-start, y-start, x-stop, y-stop]
	\				1: n - idx
	\				2: g - gui
	\ out:	0: g - gui
	nip											\ gui fixed_data_itm
	0 a:@ swap 1 a:@ 				\ gui x-start fixed_data_itm y-start
	rot swap								\ gui fixed_data_itm x-start y-start
	3 pick swap rot swap		\ gui fixed_data_itm gui x-start y-start
	g:moveto								\ gui fixed_data_itm gui
	swap 2 a:@ swap 3 a:@ 	\ gui gui x-stop fixed_data_itm y-stop
	nip											\ gui gui x-stop y-stop
	g:lineto drop	
;	

\ ----------------------------------
\ Make the grid path
: __renderer_make_grid_path	SED: g -- g
	\ in: 	0: g - gui
	\ out:	0: g - gui	
	__render_fixed_data@ ' __renderer_doline a:each drop 
;

\ ----------------------------------
\ Draw the grid with dBm and freq labels
: __renderer_draw_grid	SED: g -- g
	\ in: 	0: g - gui
	\ out:	0: g - gui	
	"gray17" g:scolor
	g:clearpath
	g:path
	__renderer_make_grid_path
	g:/path g:stroke
	\ Labels
	"yellow:50" g:scolor
	__render_h_label_data@ ' __renderer_draw_label a:each drop
	__render_v_label_data@ ' __renderer_draw_label a:each
	drop 
;

\ ===============================================================================
\ Panadapter Drawing
\ ===============================================================================

\ ----------------------------------
\ Close the pan path so it can be filled
: __complete_pan_path	SED: g a --
	\ in: 	0: a - pan_data (whole array)
	\				1: g - gui
	\ out:	none
	\ Line from the current end point to the bottom right
	\ swap "inst_data" t:@ get_disp_win_metrics 2dup a:open		\ pan-data gui [width,height] gui width height
	swap "panel-metrics" g:m@ 2dup a:open											\ pan-data gui [width,height] gui width height
	b_margin n:- swap r_margin n:- swap g:lineto							\ pan-data gui [width,height] gui
	\ Line from bottom right to bottom left
	drop 2dup a:open 1 0 poke																	\ pan-data gui [width,height] gui 0 height
	b_margin n:- swap l_margin n:+ swap g:lineto							\ pan-data gui [width,height] gui
	\ Line to the first point
	\ "inst_data" t:@ pan_data_ref														\ pan-data gui [width,height] gui pan-data
	__render_pan_data@																				\ pan-data gui [width,height] gui pan-data
	0 a:@ nip 0 a:@ swap 1 a:@ nip														\ pan-data gui [width,height] gui x y
	g:lineto																									\ pan-data gui [width,height] gui
	4drop 
;

\ ----------------------------------
\ Add next pan node to path
: __do_node	SED: g n a -- g
	\ in: 	0: a - pan_data_itm [x,dBm]
	\				1: n - idx
	\				2: g - gui
	\ out:	0: g - gui
	0 a:@ swap 1 a:@ nip 	\ gui idx x y
	rot 0 n:= if					\ gui x y
		\ First item so move to
		g:moveto
	else
		\ Subsequent so add line to
		g:lineto
	then 
;

\ ----------------------------------
\ Make the pan path
: __make_pan_path	SED: g -- g
	\ in: 	0: g - gui
	\ out:	0: g - gui	
	__render_pan_data@ ' __do_node a:each
	a:len 0 n:> if
		2dup __complete_pan_path
	then
	drop 
;

\ ----------------------------------
\ Draw the panadapter display
: __renderer_draw_pan	SED: g -- g
	\ in: 	0: g - gui
	\ out:	0: g - gui
	\ Clear previous path
	g:clearpath
	\ Set palette
	"green:50" g:scolor
	"green:30" g:fcolor
	\ Create a new path 
	g:path
	__make_pan_path
	\ Render and fill path
	g:/path g:stroke-fill 
;

\ ===============================================================================
\ Waterfall Drawing
\ ===============================================================================

\ ----------------------------------
\ Scroll the image up one line
\ This creates the waterfall effect as the image moves up the screen
: __scroll	SED: g img -- g
	\ in: 	0: img - img
	\				1: g - gui
	\ out:	0: g - gui
 0 null 1 img:scroll drop 
;

\ ----------------------------------
\ Write next pixel to image at idx
: __dopix	SED: g img n a -- g img
	\ in: 	0: a - pixel data item
	\				1: n - idx
	\ 			2: img - img
	\ 			3: g - gui
	\ out:	0: img - img
	\				1: g - gui
	1 a:@ nip 					\ g img col colour
	wf_height n:1- -rot \ g img row col colour
	img:pix!
;

\ ----------------------------------
\ Write one line of the waterfall according to current data
: wf_update	SED: g -- g
	\ in: 	0: g - gui
	\ out:	0: g - gui	
	\ "inst_data" t:@ dup 
	\ wf_data_ref 					\ g disp-id wf-data-ref
	\ swap get_wf_img				\ g wf-data-ref img
	__render_wf_data@
	swap "wf-img" g:m@			\ wf-data-ref g img
	rot	' __dopix						\ g img wf-data-ref 'dopix										
	a:each drop
	__scroll
;

\ ----------------------------------
\ Draw the waterfall display
: __renderer_draw_waterfall	SED: g -- g
	\ in: 	0: g - gui
	\ out:	0: g - gui	
	\ ToDo: Check running state.
	\ st_rad_running@ if
		wf_update
		"panel-metrics" g:m@ a:open nip	\ g disp-id height
		b_margin n:-										\ g disp-id start-y
		swap "wf-img" g:m@							\ g start-y img 
		rot l_margin swap g:image-at
	\ then 
;
	
\ ===============================================================================
\ Render all display components
: __renderer_draw_all	SED: g --
	\ in: 	0: g - gui
	\ out:	none
	
	\ Common settings
	"gray11" g:fillall
	1 g:line-width
	
	\ Draw the display components
	__renderer_draw_grid
	__renderer_draw_pan
	__renderer_draw_waterfall
	\ draw_center_freq_line
	\ draw_filter_overlay
	\ draw_mouse_pos
;

\ ===============================================================================
\ PUBLIC
\ ===============================================================================

\ ============================================================================
\ Initialisation

\ ----------------------------------
\ Create a display panel
\ id bounds -- new-renderer-gui
: renderer_new	SED: s s -- g										
	__renderer_disp_panel @ G:clone nip 	\ id bounds callback vfo-clone
	\ Populate panel with additional info
	"id" 3 pick m:!
	"name" 3 pick m:!
	"bounds" 2 pick m:!
	nip	\ id renderer-clone
	g:new dup
	\ Add to gui cache
	rot swap g_cache_add
;

\ ----------------------------------
\ Initialise a renderer instance
\  gui -- gui
: renderer_init	SED: g -- g
  
;

\ ========================================
\ Reset namespace
ns: user

