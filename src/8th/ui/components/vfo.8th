(*
	vfo.8th
 
  VFO component for the SDRLibEConsole application
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
     
  This component can be multi-instanced to provide a 9 digit VFO that can be
	scrolled with the mouse wheel. It publishes frequency events as it goes.
*)

needs stack/3drop

\ ========================================
\ Testing only
false var, vfo_test

\ ----------------------------------
vfo_test @ #if
	\ Includes
	"E:/Projects/Framework/trunk/src/8th/gen_server.8th" f:include
	"E:/Projects/Framework/trunk/src/8th/pub_sub.8th" f:include
	"../../common/app_defs.8th" f:include
	"../../common/radio_defs.8th" f:include
	"../common/layout.8th" f:include
	"../common/font_cache.8th" f:include
	"../common/g_cache.8th" f:include
	\ needs debug/sed
	\ true SED-CHECK
	\ needs debug/trace
	\ dbg:line-info
#then
\ ========================================

\ Use SDR namespace
ns: sdr
with: fr.gs
with: fr.ps

\ ============================================================================
\ User draw components
\
\ ========================================
\ A single VFO digit
{
  "kind" : "Digit",
  "fg" : "gray96",
  "bg" : "gray10",
  "rot" : 0,
  "draw" : "sdr:digit_draw"
} var, vfo_digit

\ ========================================
\ Spacer to add between VFO digits
{
  "kind" : "Separator",
  "fg" : "lightcoral",
  "bg" : "gray10",
  "rot" : 0,
  "draw" : "sdr:sep_draw"
} var, vfo_separator

\ ========================================
\ VFO panel consisting og 9 digits
\ There are additional fields to hold data for the instance
{
  "kind" : "VFO",
  \ Additional state
  "freq" : 1000000,
  "low-limit" : 100000,
  "high-limit" : 500000000,
  "digits" : [],
  \ End additional state
  "fg" : "gray96",
  "bg" : "gray10",
  "rot" : 0,
  "font" : "Arial 14",
  "children" : [
		{
			"kind" : "Digit",
			"value" : 0,
			"highlight" : false,
			"scolor" : "gray96",
			"font" : "Arial 30",
			"font-hi" : "Arial 33",
			"bounds" : ` 0 0 10 100 do_bounds `,
			"mouse-wheel" : "sdr:wheel_100_MHz",
			"mouse-exit" : "sdr:mouseexit_100_MHz",
			"mouse-enter" : "sdr:mouseenter_100_MHz"
		},
		{
			"kind" : "Digit",
			"value" : 0,
			"highlight" : false,
			"scolor" : "gray96",
			"font" : "Arial 30",
			"font-hi" : "Arial 33",
			"bounds" : ` 10 0 20 100 do_bounds `,
			"mouse-wheel" : "sdr:wheel_10_MHz",
			"mouse-exit" : "sdr:mouseexit_10_MHz",
			"mouse-enter" : "sdr:mouseenter_10_MHz"
		},
		{
			"kind" : "Digit",
			"value" : 0,
			"highlight" : false,
			"scolor" : "gray96",
			"font" : "Arial 30",
			"font-hi" : "Arial 33",
			"bounds" : ` 20 0 30 100 do_bounds `,
			"mouse-wheel" : "sdr:wheel_1_MHz",
			"mouse-exit" : "sdr:mouseexit_1_MHz",
			"mouse-enter" : "sdr:mouseenter_1_MHz"
		},
		{
		  "kind" : "Separator",
		  "rot" : 0,
		  "bounds" : ` 30 0 35 100 do_bounds `
		},
		{
			"kind" : "Digit",
			"value" : 0,
			"highlight" : false,
			"scolor" : "gray96",
			"font" : "Arial 30",
			"font-hi" : "Arial 33",
			"bounds" : ` 35 0 45 100 do_bounds `,
			"mouse-wheel" : "sdr:wheel_100_KHz",
			"mouse-exit" : "sdr:mouseexit_100_KHz",
			"mouse-enter" : "sdr:mouseenter_100_KHz"
		},
		{
			"kind" : "Digit",
			"value" : 0,
			"highlight" : false,
			"scolor" : "gray96",
			"font" : "Arial 30",
			"font-hi" : "Arial 33",
			"bounds" : ` 45 0 55 100 do_bounds `,
			"mouse-wheel" : "sdr:wheel_10_KHz",
			"mouse-exit" : "sdr:mouseexit_10_KHz",
			"mouse-enter" : "sdr:mouseenter_10_KHz"
		},
		{
			"kind" : "Digit",
			"value" : 0,
			"highlight" : false,
			"scolor" : "gray96",
			"font" : "Arial 30",
			"font-hi" : "Arial 33",
			"bounds" : ` 55 0 65 100 do_bounds `,
			"mouse-wheel" : "sdr:wheel_1_KHz",
			"mouse-exit" : "sdr:mouseexit_1_KHz",
			"mouse-enter" : "sdr:mouseenter_1_KHz"
		},
		{
			"kind" : "Separator",
			"rot" : 0,
			"bounds" : ` 65 0 70 100 do_bounds `
		},
		{
			"kind" : "Digit",
			"value" : 0,
			"highlight" : false,
			"scolor" : "darkorange",
			"font" : "Arial 20",
			"font-hi" : "Arial 23",
			"bounds" : ` 70 0 80 100 do_bounds `,
			"mouse-wheel" : "sdr:wheel_100_Hz",
			"mouse-exit" : "sdr:mouseexit_100_Hz",
			"mouse-enter" : "sdr:mouseenter_100_Hz"
		},
		{
			"kind" : "Digit",
			"value" : 0,
			"highlight" : false,
			"scolor" : "darkorange",
			"font" : "Arial 20",
			"font-hi" : "Arial 23",
			"bounds" : ` 80 0 90 100 do_bounds `,
			"mouse-wheel" : "sdr:wheel_10_Hz",
			"mouse-exit" : "sdr:mouseexit_10_Hz",
			"mouse-enter" : "sdr:mouseenter_10_Hz"
		},
		{
			"kind" : "Digit",
			"value" : 0,
			"highlight" : false,
			"scolor" : "darkorange",
			"font" : "Arial 20",
			"font-hi" : "Arial 23",
			"bounds" : ` 90 0 100 100 do_bounds `,
			"mouse-wheel" : "sdr:wheel_1_Hz",
			"mouse-exit" : "sdr:mouseexit_1_Hz",
			"mouse-enter" : "sdr:mouseenter_1_Hz"
		}
	]
} var, vfo_panel

\ Register our custom component parts as additional kinds of widget
vfo_panel @ g:+kind
vfo_digit @ g:+kind
vfo_separator @ g:+kind

\ ===============================================================================
\ PRIVATE
\	Convention: all private words start __
\ ===============================================================================

\ ============================================================================
\ VFO implementation

\ ========================================
\ We keep an array of digit children in the parent as it makes iterating digits
\ easier as separators need to be skipped
\ Enumerate digits into an array in parent

\ ----------------------------------
\ Append an index to the digit array
\ parent digit_array ix child_index -- parent digit_array
: __append_child	SED: g a n n -- g a
	3 pick swap		\ parent digit_array ix parent child_index
	g:child				\ parent digit_array ix digit-gui
	a:!						\ parent digit_array
;

\ ----------------------------------
\ Write the list of indexes which correspond to actual digits to the digit array
\ parent -- parent
: __enumerate_digits	SED: g -- g
	\ Get array
	"digits" g:m@
	\ Indexes of digit children
	\ Note 3 & 7 are separators
	[0,1,2,4,5,6,8,9,10]
	' __append_child a:each
	2drop
;	

\ ===============================================================================
\ Action helpers and implementation
\ ACTION_INCREMENT 0 ;		\ Allowed so just Inc/Dec the digit
\ ACTION_REPAINT 1 ;			\ Allowed but digit rolledover/under so a full adjust and repaint is required
\ ACTION_OUT_OF_RANGE 2 
\ ===============================================================================

\ ========================================
\ Action helper words

\ ----------------------------------
\ array-children ix freq-digit -- array-children
\ Set a single digit in the array
\ array-children ix freq-digit -- array-children
: __set_digit	SED: a n s -- a 
	\ Set the freq-digit in array-children[ix]
	-rot 								\ freq-digit array-children ix 
	a:@ 								\ freq-digit array-children child-digit-ob 
	"value"							\ freq-digit array-children child-digit-ob "value"
	3 pick G:>n					\ freq-digit array-children child-digit-ob "value" freq-digit
	g:m!								\ freq-digit array-children child-digit-ob
	drop nip						\ array-children
;

\ ----------------------------------
\ Reset all digits to the current frequency
\ parent-gui -- parent-gui
: __reset_all_digits	SED: g -- g
	\ Get the frequency in Hz
	"freq" g:m@	n:int								\ parent-gui freq-in-hz
	\ Make it a 9 digit array with leading 0's
	"%09d" s:strfmt null s:/				\ parent-gui array-freq-in-hz
	\ Work through the array and set each digit value
	swap 														\ array-freq-in-hz parent-gui
	"digits" g:m@ 									\ array-freq-in-hz parent-gui array-digit-obj
	rot															\ parent-gui array-digit-obj array-freq-in-hz
	' __set_digit a:each 2drop			\ parent-gui
;

\ ----------------------------------
\ Invalidate component
\ gui --
: __repaint_child	SED: g -- 
	g:invalidate drop
;

\ ----------------------------------
\ Publish frequency update
\ freq-in-hz vfo-gui -- 
: publish_freq SED: n g --
	\ Set null callback word as no response required.
	"callback" g:m@ nip w:exec
;

\ ----------------------------------
\ Update frequency digits to new frequency and publish
\ increment(Hz) gui -- increment(Hz) gui
: update_freq_value	SED: n g -- n g
	dup g:parent "freq"			\ increment(Hz) gui parent "freq"
	g:m@								 		\ increment(Hz) gui parent freq-value
	3 pick 							 		\ increment(Hz) gui parent freq-value increment(Hz)
	n:+ "freq"					 		\ increment(Hz) gui parent new-freq "freq"
	swap 								 		\ increment(Hz) gui parent "freq" new-freq
	dup 										\ increment(Hz) gui parent "freq" new-freq new-freq
	-rot 										\ increment(Hz) gui parent new-freq "freq" new-freq
	3 pick 									\ increment(Hz) gui parent new-freq "freq" new-freq parent
	-rot										\ increment(Hz) gui parent new-freq parent "freq" new-freq
	g:m!										\ increment(Hz) gui parent new-freq parent
	drop swap								\ increment(Hz) gui new-freq parent
	publish_freq	 					\ 
;

\ ========================================
\ Action implementation

\ ----------------------------------
\ Increment/decrement the value
\ gui value increment(MHz) -- value increment(MHz) gui
: do_inc	SED: g n n -- n n g 										
	rot 									\ gui value increment(MHz) -- value increment(MHz) gui 
	g:invalidate
	update_freq_value			\ value increment(MHz) gui -- value increment(MHz) gui
;

\ ----------------------------------
\ Repaint all
\ gui value increment(MHz) -- value increment(MHz) gui
: do_repaint	SED: g n n -- n n g 									
	rot																\ gui value increment(MHz) -- value increment(MHz) gui
	dup >r update_freq_value r>				\ value increment(MHz) gui -- value increment(MHz) gui
	\ We now need to reset all the values in the digits for the new frequency
	g:parent __reset_all_digits				\ value increment(MHz) gui -- value increment(MHz) gui parent-gui
	\ Then we repaint all children
	' __repaint_child g:each drop 		\ value increment(MHz) gui parent-gui -- value increment(MHz) gui
;

\ ----------------------------------
\ Ignore out of frequency range
\ gui value increment(MHz) -- value increment(MHz) gui
: do_range	SED: g n n -- n n g 										
	2drop
;

\ ========================================
\ Frequency check implementation

\ ----------------------------------
\ Is frequency within the allowed range
\	lower upper freq increment -- flag
: freq_out_of_range	SED: n n n n -- T
	2dup n:+ dup							\ lower upper freq increment -- lower upper freq increment f+i f+i
	5 pick										\ lower upper freq increment f+i -- lower upper freq increment f+i f+i lower
	n:< not if 								\ lower upper freq increment f+i f+i lower -- lower upper freq increment f+i
		\ Higher than low limit
		3 pick 									\ lower upper freq increment f+i -- lower upper freq increment f+i upper
		n:> not if							\ lower upper freq increment f+i upper -- lower upper freq increment
			\ Lower than high limit, good to go
			4drop false ;;				\ lower upper freq increment -- f
		else
			4drop									\ lower upper freq increment --
		then
	else
		drop 4drop							\ lower upper freq increment f+i --
	then
	true											\ -- f
;

\ ----------------------------------
\ Has the digit rolled over
\ digit-value -- digit-value flag
: freq_rollover	SED: n -- n T
	dup 9 n:> not if
		dup 0 n:< not if
			false ;;
		then
	then
	true
;

\ ========================================
\ Action determination

\ Apply the frequency increment and determin the correct action to take.
\ One of Inc/Dec, Full Repaint or Ignore if moves outside the valid range.
\ Actions
: ACTION_INCREMENT 0 ;		\ Allowed so just Inc/Dec the digit
: ACTION_REPAINT 1 ;			\ Allowed but digit rolledover/under so a full adjust and repaint is required
: ACTION_OUT_OF_RANGE 2 ;	\ Ignore because the increment would take the frequency outside the permitted range

\ ----------------------------------
\ Check frequency and take appropriate action
\ gui value increment(MHz) -- gui value increment(MHz) action
: do_freq_checks	SED: g n n -- g n n n
	\ Check freq in range
	rot														\ gui value increment(MHz) -- value increment(MHz) gui
	dup g:parent 									\ value increment(MHz) gui -- value increment(MHz) gui parent-gui
	"low-limit" g:m@ swap					\ value increment(MHz) gui parent-gui -- value increment(MHz) gui low-limit parent-gui
	"high-limit" g:m@ swap 				\ value increment(MHz) gui low-limit parent-gui -- value increment(MHz) gui low-limit high-limit parent-gui
	"freq" g:m@	swap							\ value increment(MHz) low-limit high-limit gui -- value increment(MHz) gui low-limit high-limit freq parent-gui
	drop 4 pick 									\ value increment(MHz) gui low-limit high-limit freq parent-gui -- value increment(MHz) gui low high freq increment(MHz)
	freq_out_of_range if					\ value increment(MHz) gui low high freq increment(MHz) -- value increment(MHz) gui
		\ Reject the update
		-rot ACTION_OUT_OF_RANGE ;;	\ value increment(MHz) gui -- gui value increment(MHz) ACTION_OUT_OF_RANGE
	else
		-rot swap freq_rollover if	\ value increment(MHz) gui
			\ Yes, we will need a full repaint
			swap ACTION_REPAINT ;;
		then
	then
	\ OK to just inc/dec the digit
	swap ACTION_INCREMENT
;

\ ===============================================================
\ Update entry point
\ Updates the stored frequency and the visual representation
\ Called from mouse wheel events
\	gui value increment(Hz) -- value increment(Hz) gui
: update_freq	SED: g n n -- n n g
	\ Value is the digit value which can be +ve or -ve
	\ Increment is the increment value of the digit i.e. 100MHz
	\ Increment can be +ve or -ve depending on the mouse wheel
	\ direction and the number of clicks.
	\ Determine action to take
	do_freq_checks		\ gui value increment(MHz) action -- 
	\ Switch on action
	[ ' do_inc , ' do_repaint , ' do_range ] swap
	caseof
;	

\ ======================================================================================
\ GUI Events

\ ========================================
\ Helpers

\ ----------------------------------
\ Mouse wheel helpers, inc/dec and store the current value
\ delta gui -- new-value gui
: wheel_value	SED: n g -- n g
	"value" g:m@ 				\ delta gui current-value
	rot									\ gui current-value delta
	0 n:< if						\ gui current-value
		n:1-							\ gui new-value (wheel reverse)
	else
		n:1+  						\ gui new-value (wheel forward)
	then
	dup									\ gui new-value new-value
	rot swap						\ new-value gui new-value
	"value" swap 				\ new-value gui "value" new-value
	g:m!								\ new-value gui
;

\ ========================================
\ Drawing event handlers

\ ----------------------------------
\ Draw an individual digit according to highlight and value
\ gui -- gui
: digit_draw	SED: g -- g
	"highlight" g:m@ if "font-hi" else "font" then
  g:m@ mysetfont
	"scolor" g:m@ g:scolor
	"value" g:m@ G:>s 10 20 rot g:draw-text-at
;

\ ----------------------------------	
\ Draw a separator between digit groups
\ gui -- gui
: sep_draw	SED: g -- g
	"grey42" g:scolor
	"grey42" g:fcolor
	1 g:line-width
	7 30 3 0 360 g:arc
	g:fill
	g:stroke
;

\ ======================================================================================
\ Mouse event handlers
\ Enter, leave and wheel for each digit
\ 100 MHz
\ gui -- gui
: mouseenter_100_MHz	SED: g -- g 
  "highlight" true g:m!
  g:invalidate
;

\ gui -- gui
: mouseexit_100_MHz	SED: g -- g 
  "highlight" false g:m!
  g:invalidate
;

\ gui reversed? deltaX deltaY posX posY -- gui
: wheel_100_MHz	SED: g T n n n n -- g						
	2drop nip nip dup rot		\ deltaY deltaY gui 
	wheel_value 						\	deltaY new-value gui
	rot											\ new-value gui	deltaY
	0 n:< if
		-100000000						\ new-value gui	-100000000
	else
		100000000							\ new-value gui	100000000
	then
	rot swap								\ gui new-value 100000000 
	update_freq	nip nip			\	gui 
;

\ 10 MHz
\ gui -- gui
: mouseenter_10_MHz	SED: g -- g 
  "highlight" true g:m!
  g:invalidate
;

\ gui -- gui
: mouseexit_10_MHz	SED: g -- g 
  "highlight" false g:m!
  g:invalidate
;

\ gui reversed? deltaX deltaY posX posY -- gui
: wheel_10_MHz	SED: g T n n n n -- g	
	2drop nip nip dup rot		\ deltaY deltaY gui 
	wheel_value 						\	deltaY new-value gui
	rot											\ new-value gui	deltaY
	0 n:< if
		-10000000							\ new-value gui	-10000000
	else
		10000000							\ new-value gui	10000000
	then
	rot swap								\ gui new-value 10000000 
	update_freq	nip nip			\	gui 
;

\ 1 MHz
\ gui -- gui
: mouseenter_1_MHz	SED: g -- g 
  "highlight" true g:m!
  g:invalidate
;

\ gui -- gui
: mouseexit_1_MHz	SED: g -- g 
  "highlight" false g:m!
  g:invalidate
;

\ gui reversed? deltaX deltaY posX posY -- gui
: wheel_1_MHz	SED: g T n n n n -- g
	2drop nip nip dup rot		\ deltaY deltaY gui 
	wheel_value 						\	deltaY new-value gui
	rot											\ new-value gui	deltaY
	0 n:< if
		-1000000							\ new-value gui	-1000000
	else
		1000000								\ new-value gui	1000000
	then
	rot swap								\ gui new-value 1000000 
	update_freq	nip nip			\	gui 
;

\ 100KHz
\ gui -- gui
: mouseenter_100_KHz	SED: g -- g 
  "highlight" true g:m!
  g:invalidate
;

\ gui -- gui
: mouseexit_100_KHz	SED: g -- g 
  "highlight" false g:m!
  g:invalidate
;

\ gui reversed? deltaX deltaY posX posY -- gui
: wheel_100_KHz	SED: g T n n n n -- g
	2drop nip nip dup rot		\ deltaY deltaY gui 
	wheel_value 						\	deltaY new-value gui
	rot											\ new-value gui	deltaY
	0 n:< if
		-100000								\ new-value gui	-100000
	else
		100000								\ new-value gui	100000
	then
	rot swap								\ gui new-value 100000 
	update_freq	nip nip			\	gui 
;

\ 10KHz
\ gui -- gui
: mouseenter_10_KHz	SED: g -- g 
  "highlight" true g:m!
  g:invalidate
;

\ gui -- gui
: mouseexit_10_KHz	SED: g -- g 
  "highlight" false g:m!
  g:invalidate
;

\ gui reversed? deltaX deltaY posX posY -- gui
: wheel_10_KHz	SED: g T n n n n -- g
	2drop nip nip dup rot		\ deltaY deltaY gui 
	wheel_value 						\	deltaY new-value gui
	rot											\ new-value gui	deltaY
	0 n:< if
		-10000								\ new-value gui	-10000
	else
		10000									\ new-value gui	10000
	then
	rot swap								\ gui new-value 10000
	update_freq	nip nip			\	gui  
;

\ 1KHz
\ gui -- gui
: mouseenter_1_KHz	SED: g -- g 
  "highlight" true g:m!
  g:invalidate
;

\ gui -- gui
: mouseexit_1_KHz	SED: g -- g
  "highlight" false g:m!
  g:invalidate
;

\ gui reversed? deltaX deltaY posX posY -- gui
: wheel_1_KHz	SED: g T n n n n -- g
	2drop nip nip dup rot		\ deltaY deltaY gui 
	wheel_value 						\	deltaY new-value gui
	rot											\ new-value gui	deltaY
	0 n:< if
		-1000									\ new-value gui	-1000
	else
		1000									\ new-value gui	1000
	then
	rot swap								\ gui new-value 1000
	update_freq	nip nip			\	gui  
;

\ 100Hz
\ gui -- gui
: mouseenter_100_Hz	SED: g -- g
  "highlight" true g:m!
  g:invalidate
;

\ gui -- gui
: mouseexit_100_Hz	SED: g -- g 
  "highlight" false g:m!
  g:invalidate
;

\ gui reversed? deltaX deltaY posX posY -- gui
: wheel_100_Hz	SED: g T n n n n -- g
	2drop nip nip dup rot		\ deltaY deltaY gui 
	wheel_value 						\	deltaY new-value gui
	rot											\ new-value gui	deltaY
	0 n:< if
		-100									\ new-value gui	-100
	else
		100										\ new-value gui	100
	then
	rot swap								\ gui new-value 100 
	update_freq	nip nip			\	gui   
;

\ 10Hz
\ gui -- gui
: mouseenter_10_Hz	SED: g -- g 
  "highlight" true g:m!
  g:invalidate
;

\ gui -- gui
: mouseexit_10_Hz	SED: g -- g 
  "highlight" false g:m!
  g:invalidate
;

\ gui reversed? deltaX deltaY posX posY -- gui
: wheel_10_Hz	SED: g T n n n n -- g
	2drop nip nip dup rot		\ deltaY deltaY gui 
	wheel_value 						\	deltaY new-value gui
	rot											\ new-value gui	deltaY
	0 n:< if
		-10										\ new-value gui	-10
	else
		10										\ new-value gui	10
	then
	rot swap								\ gui new-value 10 
	update_freq	nip nip			\	gui  
;

\ 1Hz
\ gui -- gui
: mouseenter_1_Hz	SED: g -- g 
  "highlight" true g:m!
  g:invalidate
;

\ gui -- gui
: mouseexit_1_Hz	SED: g -- g 
  "highlight" false g:m!
  g:invalidate
;

\ gui reversed? deltaX deltaY posX posY -- gui
: wheel_1_Hz	SED: g T n n n n -- g
	2drop nip nip dup rot		\ deltaY deltaY gui 
	wheel_value 						\	deltaY new-value gui
	rot											\ new-value gui	deltaY
	0 n:< if
		-1										\ new-value gui	-1
	else
		1											\ new-value gui	1
	then
	rot swap								\ gui new-value 1 
	update_freq	nip nip			\	gui 
;

\ ============================================================================
\ Initialisation

\ ----------------------------------
\ Create a VFO
\ id bounds callback -- new-vfo-gui
: vfo_new	SED: s s w -- g										
	vfo_panel @ G:clone nip 	\ id bounds callback vfo-clone
	\ Populate panel with additional info
	"id" 4 pick m:!
	"name" 4 pick m:!
	"bounds" 3 pick m:!
	"callback" 2 pick m:!
	nip nip 	\ id vfo-clone
	g:new dup
	\ Add to gui cache
	rot swap g_cache_add
;

\ ----------------------------------
\ Initialise a VFO instance
\  gui -- gui
: vfo_init	SED: g -- g
  __enumerate_digits
  __reset_all_digits
;

\ ===============================================================================
\ Restore namespace	
ns: user	

\ ===============================================================================
\ ===============================================================================
\ Testing
\ ===============================================================================

vfo_test @ #if

	\ Pull in the namespaces
	with: sdr
	
	4 json-pretty
	true app:isgui !
	
	\ Callback for publishing frequency
	: callback
		. cr
	;
	
	\ ========================================
	\ Test program entry point
	: app:main
		\ A minimal window to hold our test component
		{
			"kind" : "win",
			"title" : "SDRLibEConsole",
			"visible" : true,
			"ontop" : false,
			"bg" : "gray10",
			"resize-corner" : 20,
			"wide" : 400,
			"high" : 200,
			"top" : 100,
			"left" : 100,
			"children" : []
		} g:new
		\ Create the test VFO
		VFO-1 "0,0,300,50" ' callback vfo_new dup
		\ Add to the window
		rot swap g:+child	
		\ Initialise
		1 pick vfo_init
		\ Cleanup and save the window ref
		drop "win" t:! drop
		\ Enter event loop
	;
#then