(*
	disp_common.8th
 
  Calculations for the SDRLibEConsole displays
 
 Copyright C 2018 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

\ ============================================================================

\ ========================================
\ Testing only
false var, disp_common_test

disp_common_test @ #if
	"../../common/events.8th"  f:include
	"../../framework/param_st.8th"  f:include
	"../../framework/gen_server.8th"  f:include
	"../../framework/pub_sub.8th"  f:include
	"disp_defs.8th" f:include
	"disp_inst_data.8th" f:include
	\ needs debug/sed
	\ true SED-CHECK
#then
\ ========================================

\ Set namespace
ns: sdr

(*  
	General helper calcultions for the panadapter and waterfall displays.
*)

\ ========================================
\ dBm Calculations

\ ----------------------------------
\ Total absolute dBm span 
: span_db	SED: -- n
	\ in: 	none	
	\ out:	0: n - absolute dBm span
	low_db n:abs high_db n:+ ;

\ ----------------------------------
\ dBm increment per division in grid
: step_db	SED: -- n 
	\ in: 	none	
	\ out:	0: n - dBm per grid division
	span_db divs  n:/ ;

\ ----------------------------------
\ Given the grid number (e.g. 1-6) return
\ return a string dBm label at the given grid point
: inter_db	SED: n -- s
	\ in: 	0: n - grid number where 0 is topmost grid line
	\ out:	0: s - signed db as a string
	divs n:- n:abs step_db n:* low_db n:+ >s ;

\ ----------------------------------	
\ dBm per pixel in the y plane
: dBm_pp	SED: m -- n
	\ in: 	0: m - display instance data	
	\ out:	0: n - dBm per pixel
	get_disp_win_metrics 1 a:@ nip span_db n:/ ;

\ ----------------------------------	
\ Convert a dBm value to a y-coord
: db_to_y	SED: n n m -- n
	\ in: 	0: n - display instance data	
	\				1: n - display height
	\				2: n - dBm value
	\ out:	0: n - corresponding y coordinate
	\ rel-dBm = abs(low-dBm) - abs(dBm)
	>p 													\ dBm height
	swap n:int n:abs 						\ height abs(dBm)
	low_db n:int n:abs 					\ height abs(dBm) abs(low-dBm)
	swap n:-										\ height abs(rel-dBm)
	swap b_margin n:- swap			\ height-margin abs(rel-dBm)
	\ y-coord = height - (rel-dBm * dBm_pp)
	p> dBm_pp n:* n:- n:int			\ y-coord
;

\ ========================================
\ Frequency Calculations

\ ----------------------------------	
\ Start freq for display
: start_freq	SED: m -- n
	\ in: 	0: m - display instance data	
	\ out:	0: n - start frequency as MHz float
	get_disp_mid_freq span_freq 2 n:/ n:- 1000000 n:/ n:float ;

\ ----------------------------------	
\ Step freq per div
: step_freq	 SED: m -- n
	\ in: 	0: m - display instance data	
	\ out:	0: n - frequency increment per grid division as MHz float
	span_freq divs n:/ 1000000 n:/ n:float nip ;

\ ----------------------------------	
\ Return a string freq value for the grid division
: freq_str SED: n m -- s
	\ in: 	0: m - display instance data	
	\				1: n - grid number (e.g. 1-6)
	\ out:	0: s - frequency string in MHz (3 sig digits) for the grid number
	dup >p start_freq swap p> step_freq n:* n:+
	"%.3f" s:strfmt ;

\ ----------------------------------	
\ Freq per pixel in the x plane
: freq_pp	SED: m -- n
	\ in: 	0: m - display instance data	
	\ out:	0: n - frequency per pixel in Hz
	span_freq swap get_disp_disp_metrics 0 a:@ nip n:/ ;

\ ----------------------------------	
\ Given an x offset into the display area return the frequency at x
\ This provides a tracking frequency for the mouse pointer
: x_to_freq								\ x disp_id -- freq
	\ in: 	0: m - display instance data	
	\				1: n - x coordinate
	\ out:	0: s - frequency at x in MHz as float
	dup 										\ x disp_id spec-id 
	start_freq 1000000 n:* 	\ x disp_id start-freq 
	swap 										\ x start-freq disp_inst
	freq_pp 								\ x start-freq freq-pp
	rot 
	n:* 
	n:+ 1000000 n:/ 				\ x freq-at-x
;

\ ========================================
\ Waterfall colour calculation

\ ----------------------------------
: M160-M135	SED: n -- n T
	\ in: 	0: n - dBm value
	\ out:	0: n - dBm value
	\				1: T - true if dBm fell between limits
	dup -160 -135 n:between
;
: M135-M130 dup -135 -130  n:between ;
: M130-M125 dup -130 -125  n:between ;
: M125-M120 dup -125 -120  n:between ;
: M120-M115 dup -120 -115  n:between ;
: M115-M110 dup -115 -110  n:between ;
: M110-M100 dup -110 -100  n:between ;
: M100+ dup -100 0  n:between ;
: M200-M+40 dup -200 40  n:between ;

\ ----------------------------------
\ RGBA colour values representing the colour spread
: color-1 [ 0.0,0.0,0.2,1.0 ] ;
: color-2 [ 0.1,0.0,0.3,1.0 ] ;
: color-3 [ 0.2,0.0,0.4,1.0 ] ;
: color-4 [ 0.3,0.0,0.5,1.0 ] ;
: color-5 [ 0.5,0.0,0.4,1.0 ] ;
: color-6 [ 0.7,0.0,0.2,1.0 ] ;
: color-7 [ 0.9,0.0,0.1,1.0 ] ;
: color-8 [ 1.0,0.0,0.0,1.0 ] ;

\ ----------------------------------
\ Lookup table [w, colour]
\ If w returns true the corresponding colour is selected
[
	' M160-M135 , ' color-1 ,
	' M135-M130 , ' color-2 , 
	' M130-M125 , ' color-3 ,
	' M125-M120 , ' color-4 ,
	' M120-M115 , ' color-5 , 
	' M115-M110 , ' color-6 ,
	' M110-M100 , ' color-7 ,
	' M100+ 		, ' color-8 ,
	' M200-M+40 , ' color-1 ,
	' color-1
] var, clookup

\ ----------------------------------
\ Translate a dBm value to a colour
: db_to_colour	SED: n -- a
	\ in: 	0: n - dBm value
	\ out:	0: a - RGBA colour array
	\ Must lock read-only structures!
	clookup lock @
	a:when nip
	clookup unlock drop ;

\ ========================================
\ Restore namespace	
ns: user

\ ===============================================================================
\ ===============================================================================
\ Testing
\ ===============================================================================
disp_common_test @ #if

	: push_data
		"DISP-R1" sdr:radio_ref >r
		"A GUI" r@ sdr:set_gui_disp_instance
		400 200 r@ sdr:set_disp_win_metrics
		300 180 r@ sdr:set_disp_disp_metrics
		150 180 r@ sdr:set_mouse_pos
		true r@ sdr:mouse_valid
		"An image" r@ sdr:set_wf_img
		14000000 r@ sdr:set_disp_mid_freq
		5 r@ sdr:set_disp_mode
		6 r@ sdr:set_disp_filt
		"DISP-R1" sdr:radio_ref_unlock
	;
	
	: usage_test
		param_st_alloc
		push_data
		sdr:span_db "span_db: " . . cr
		sdr:step_db "step_db: " . . cr
		0 sdr:inter_db "inter_db: " . . cr
		6 sdr:inter_db "inter_db: " . . cr
		r@ sdr:dBm_pp "dBm_pp: " . . cr
		
		-20 400 r@ sdr:db_to_y "db_to_y: " . . cr
		-40 400 r@ sdr:db_to_y "db_to_y: " . . cr
		-60 400 r@ sdr:db_to_y "db_to_y: " . . cr
		-80 400 r@ sdr:db_to_y "db_to_y: " . . cr
		-100 400 r@ sdr:db_to_y "db_to_y: " . . cr
		-110 400 r@ sdr:db_to_y "db_to_y: " . . cr
		-120 400 r@ sdr:db_to_y "db_to_y: " . . cr
		-130 400 r@ sdr:db_to_y "db_to_y: " . . cr
		-140 400 r@ sdr:db_to_y "db_to_y: " . . cr
		
		-20 sdr:db_to_colour "db_to_colour: " . . cr
		-40 sdr:db_to_colour "db_to_colour: " . . cr
		-100 sdr:db_to_colour "db_to_colour: " . . cr
		-110 sdr:db_to_colour "db_to_colour: " . . cr
		-115 sdr:db_to_colour "db_to_colour: " . . cr
		-120 sdr:db_to_colour "db_to_colour: " . . cr
		-125 sdr:db_to_colour "db_to_colour: " . . cr
		-130 sdr:db_to_colour "db_to_colour: " . . cr
		-135 sdr:db_to_colour "db_to_colour: " . . cr
		
		r@ sdr:start_freq "start_freq: " . . cr		
		r@ sdr:step_freq "step_freq: " . . cr
		1 r@ sdr:freq_str "freq_str: " . . cr
		3 r@ sdr:freq_str "freq_str: " . . cr
		6 r@ sdr:freq_str "freq_str: " . . cr
		r@ sdr:freq_pp "freq_pp: " . . cr
		0 r@ sdr:x_to_freq "x_to_freq: " . . cr
		100 r@ sdr:x_to_freq "x_to_freq: " . . cr
		200 r@ sdr:x_to_freq "x_to_freq: " . . cr
	;
	
	cr cr "Running usage test..." . cr cr
	usage_test
	1 sleep
	"Done usage test" . cr
	
	bye
#then