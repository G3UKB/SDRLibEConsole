(*
	disp_panel.8th
 
  Display component for the SDRLibEConsole application
 
 Copyright C 2018 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

\ Use SDR namespace
ns: sdr

(*
	There is one display panel for each radio. This module drives the displays
	by invalidating the panel on each timer event. The disp_render.8th module
	is then enetered at the paint event to render the display.
*)

\ ===============================================================================
\ Display panel per radio fits inside its parent.
\ The panadapter is the top variable size display with a fixed hight waterfall below.
{
	"kind" : "box",
	"name" : "display-name",
	"id" : "display-id",
	"bounds" : "0,0,parent.width, parent.height",
	"bg" : "gray10",
	"draw" : "sdr:disp_draw",
	"size" : "sdr:disp_size",
	"mouse-moved" : "sdr:mouse_move",
	"mouse-down" : "sdr:mouse_down",
	"mouse-enter" : "sdr:mouse_enter",
	"mouse-exit" : "sdr:mouse_exit",
	"timer-period" : 200,
	"timer" : "sdr:disp-timer"
} var, disp_panel

\ ===============================================================================
\ GUI event handlers

\ ========================================
\ Size event
\ On resize save the new panel width and height and display width and height
: disp_size	SED: g n n --	
	\ in: 	0: n - height
	\				1: n - width
	\				2: g - gui
	\ out:	none
	rot "id" g:m@ nip -rot 
	2 pick radio_ref
	set_all_metrics
	radio_ref_unlock ;

\ ========================================
\ Drawing event
: disp_draw	\ gui --
	draw_all
	drop ;

\ ========================================
\ Mouse events

\ ----------------------------------
\ Mouse entered the display panel
: mouse_enter	\ gui --
	true swap "id" g:m@ nip mouse_valid
;

\ ----------------------------------
\ Mouse exited the display panel
: mouse_exit	\ gui --
	false swap "id" g:m@ nip mouse_valid
;

\ ----------------------------------
\ Mouse moved
\ Inside or outside the dislay area
: mouse_move	\ gui x y --
	2 pick "id" g:m@ nip
	dup wait_disp_s4
	set_mouse_pos
	"id" g:m@ rel_disp_s4
;

\ ========================================
\ Click frequency management

\ ----------------------------------
\ Determine which radio panel we are within
: click_freq_r1 \ spec-id -- 
	dup "DISP-R1" s:= if drop true true else false then
;

: click_freq_r2 \ spec-id --
	dup "DISP-R2" s:= if drop true true else false then
;

: click_freq_r3 \ spec-id --
	dup "DISP-R3" s:= if drop true true else false then 
;

\ ----------------------------------
\ Mouse button down
\ Directly set the radio frequency 
\ ToDo - what if we are outside the panel?
: mouse_down									\ gui x y --
	drop over 									\ x gui
	"id" g:m@ nip  							\ x id
	swap l_margin n:- 					\ id x-l_margin
	over  											\ id x-l_margin id
	x_to_freq 1000000 n:* swap 	\ freq id  
	[ ' click_freq_r1 , ' model_r1_set_freq , ' click_freq_r2 , ' model_r2_set_freq ,  ' click_freq_r3 , ' model_r3_set_freq ]
		a:when
	drop
;

\ ========================================
\ GUI Timer
\ Render on the timer frequency by invalidating the display
: disp-timer	\ g --
	g:invalidate
;

\ ===============================================================================
\ Create and initialise a display panel

\ ----------------------------------
\ Create a display panel
: disp_panel_new						\ id bounds -- new-disp-gui
	disp_panel @ G:clone nip	\ id bounds disp-clone
	"id" 3 pick m:!						\ id bounds disp-clone
	"name" 3 pick m:! 				\ id bounds disp-clone
	"bounds" 2 pick m:! 			\ id bounds disp-clone
	nip 											\ id spec-clone
	g:new dup 								\ id new-disp-gui new-disp-gui
	rot set_gui_disp_instance	\ new-disp-gui
;

\ ----------------------------------
\ Initialise a display panel instance
: disp_panel_init								\ disp_id -- 
	\ Start a task for this instance
	dup 1 ' disp_task t:task-n		\ disp-id t
	\ FIXME
	\ Does not exit properly so we wait for ever
	task_dict @ swap 							\ disp-id task-dict t
	rot swap											\ task-dict disp-id t
	m:! drop
;

\ ===============================================================================
\ Subscriber Events

\ ----------------------------------
\ Freq update
: disp_evt_r1_vfo						\ a --
	"DISP-R1" swap						\ DISP-ID a
	"freq" m:@								\ DISP-ID a f
	2 pick wait_disp_s4				\ DISP-ID a f
	2 pick set_disp_mid_freq 	\ DISP-ID a f
	swap rel_disp_s4					\ a f
	drop											\ a
;

\ ----------------------------------
: disp_evt_r2_vfo						\ a --
	"DISP-R2" swap						\ DISP-ID a
	"freq" m:@								\ DISP-ID a f
	2 pick wait_disp_s4				\ DISP-ID a f
	2 pick set_disp_mid_freq 	\ DISP-ID a f
	swap rel_disp_s4					\ a f
	drop		
;

\ ----------------------------------
: disp_evt_r3_vfo						\ a --
	"DISP-R3" swap						\ DISP-ID a
	"freq" m:@								\ DISP-ID a f
	2 pick wait_disp_s4				\ DISP-ID a f
	2 pick set_disp_mid_freq 	\ DISP-ID a f
	swap rel_disp_s4					\ a f
	drop
;

\ ----------------------------------
\ Mode update
: disp_evt_r1_mode	\ a --
	"mode" m:@
	"DISP-R1" set_disp_mode
	drop
;

: disp_evt_r2_mode	\ a --
	"mode" m:@
	"DISP-R2" set_disp_mode
	drop
;

: disp_evt_r3_mode	\ a --
	"mode" m:@
	"DISP-R3" set_disp_mode
	drop
;

\ ----------------------------------
\ Filter update
: disp_evt_r1_filt	\ a --
	"filter" m:@
	"DISP-R1" set_disp_filt
	drop
;

: disp_evt_r2_filt	\ a --
	"filter" m:@
	"DISP-R2" set_disp_filt
	drop
;

: disp_evt_r3_filt	\ a --
	"filter" m:@
	"DISP-R3" set_disp_filt
	drop
;

\ ========================================
\ Subscribe to available radios
: disp_subscribe_radios_1
	UI_R1_FREQ ' disp_evt_r1_vfo pubsub_subscribe
	UI_R1_MODE ' disp_evt_r1_mode pubsub_subscribe 
	UI_R1_FILT ' disp_evt_r1_filt pubsub_subscribe ;

: disp_subscribe_radios_2
	UI_R2_FREQ ' disp_evt_r2_vfo pubsub_subscribe
	UI_R2_MODE ' disp_evt_r2_mode pubsub_subscribe 
	UI_R2_FILT ' disp_evt_r2_filt pubsub_subscribe ;

: disp_subscribe_radios_3
  UI_R3_FREQ ' disp_evt_r3_vfo pubsub_subscribe
	UI_R3_MODE ' disp_evt_r3_mode pubsub_subscribe 
	UI_R3_FILT ' disp_evt_r3_filt pubsub_subscribe ;

: disp_do_r1_sub
	disp_subscribe_radios_1 ;
	
: disp_do_r2_sub
	disp_subscribe_radios_1 
	disp_subscribe_radios_2 ;
	
: disp_do_r3_sub
	disp_subscribe_radios_1
	disp_subscribe_radios_2 
	disp_subscribe_radios_3 ;
	
: disp_subscribe	\  --
  \ Subscribe to events
	[ ' disp_do_r1_sub , ' disp_do_r2_sub , ' disp_do_r3_sub ]
	swap caseof
;

\ ========================================
\ Restore namespace	
ns: user	