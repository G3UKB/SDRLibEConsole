(*
	disp_panel.8th
 
  Display component for the SDRLibEConsole application
 
 Copyright C 2018 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

\ Use SDR namespace
ns: sdr

(*
	There is one display panel for each radio. This module drives the displays
	by invalidating the panel on each timer event. The disp_draw override is then
	invoked to paint the gui. This in turn calls draw_all in disp_render.8th.
*)

\ ===============================================================================
\ Display panel per radio fits inside its parent.
\ The panadapter is the top variable size display with a fixed hight waterfall below.
{
	"kind" : "box",
	"name" : "display-name",
	"id" : "display-id",
	"bounds" : "0,0,parent.width, parent.height",
	"bg" : "gray10",
	"draw" : "sdr:disp_draw",
	"size" : "sdr:disp_size",
	"mouse-moved" : "sdr:mouse_move",
	"mouse-down" : "sdr:mouse_down",
	"mouse-enter" : "sdr:mouse_enter",
	"mouse-exit" : "sdr:mouse_exit",
	"timer-period" : 100,
	"timer" : "sdr:disp-timer"
} var, disp_panel

\ ===============================================================================
\ GUI event handlers

\ ========================================
\ Size event
\ On resize save the new panel width and height and display width and height
: disp_size	SED: g n n --	
	\ in: 	0: n - height
	\				1: n - width
	\				2: g - gui
	\ out:	none
	1 pick r_margin n:- l_margin n:- >p
	rot "id" g:m@ nip -rot 
	2 pick radio_ref
	set_all_metrics
	radio_ref_unlock
	st_svr_running@ if
		a:new p> a:push ' conn_set_disp_width a:push false a:push
		"TRANSIENT_TASK" ' conn_call rot fr:msg!
	else
		1 pndrop
	then ;

\ ========================================
\ Drawing event
: disp_draw	SED: g --
	\ in: 	0: g - gui
	\ out:	none
	\ Call the renderer
	draw_all
	drop ;

\ ========================================
\ Mouse events

\ ----------------------------------
\ Mouse entered the display panel
: mouse_enter	SED: g --
	\ in: 	0: g - gui
	\ out:	none
	dup true swap "id" g:m@ nip radio_ref
	mouse_valid
	"id" g:m@ radio_ref_unlock
;

\ ----------------------------------
\ Mouse exited the display panel
: mouse_exit	SED: g --
	\ in: 	0: g - gui
	\ out:	none
	dup false swap "id" g:m@ nip radio_ref
	mouse_valid
	"id" g:m@ radio_ref_unlock
;

\ ----------------------------------
\ Mouse moved
\ Inside or outside the dislay area
: mouse_move	SED: g n n --
	\ in: 	0: g - gui
	\				1: n - mouse x coord
	\				2: n - mouse y coord
	\ out:	none
	2 pick "id" g:m@ nip radio_ref
	set_mouse_pos
	"id" g:m@ radio_ref_unlock
;

\ ========================================
\ Click frequency management

\ ----------------------------------
\ Determin which radio panel we are within
: click_freq_r1	SED: s --
	\ in: 	0: s - display name
	\ out:	none
	dup "DISP-R1" s:= if drop false true else false then ;

: click_freq_r2	SED: s --
	\ in: 	0: s - display name
	\ out:	none
	dup "DISP-R2" s:= if drop false true else false then ;

: click_freq_r3	SED: s --
	\ in: 	0: s - display name
	\ out:	none
	dup "DISP-R3" s:= if drop false true else false then ;

\ ----------------------------------
\ Mouse button down
\ Directly set the radio frequency 
\ ToDo - what if we are outside the panel?
: mouse_down	SED: g n n --
	\ in: 	0: g - mouse x coord
	\				1: n - mouse y coord
	\				2: n - gui
	\ out:	none
	drop 1 pick 									\ x gui
	"id" g:m@ nip  							\ x id
	swap l_margin n:- 					\ id x-l_margin
	over radio_ref 							\ id x-l_margin inst-data
	x_to_freq 1000000 n:* swap 	\ freq id  
	[ ' click_freq_r1 , ' app_model_r1_set_freq , ' click_freq_r2 , ' app_model_r2_set_freq ,  ' click_freq_r3 , ' app_model_r3_set_freq ]
		a:when
	"id" g:m@ nip radio_ref_unlock ;

\ ========================================
\ GUI Timer
\ Render on the timer tick by invalidating the display
: disp-timer	SED: g --
	\ The paint override will be invoked
	g:invalidate
;

\ ===============================================================================
\ Create and initialise a display panel

\ ----------------------------------
\ Create a display panel
\ disp_id radio-gui disp_id bounds
: disp_panel_new	SED: s a --
	\ in: 	0: g - bounds for display
	\				1: s - display name
	\ out:	none
	\ Get a new data instance
	disp_panel @ G:clone nip	\ id bounds disp-clone
	\ Set the instance data
	"id" 3 pick m:!						\ id bounds disp-clone
	"name" 3 pick m:! 				\ id bounds disp-clone
	"bounds" 2 pick m:! 			\ id bounds disp-clone
	nip												\ id spec-clone
	\ Create the new panel
	g:new dup 								\ id new-disp-gui new-disp-gui
	\ Save it in the instance data
	2 pick radio_ref					\ id new-disp-gui new-disp-gui inst-ref
	set_gui_disp_instance			\ id new-disp-gui
	swap radio_ref_unlock ;

\ ===============================================================================
\ Subscriber Events

: disp_evt_vfo	SED: s a --
	\ in: 	0: a - event array
	\				1: s - display name
	\ out:	none
	"freq" m:@ nip						\ DISP-ID f
	over radio_ref						\ DISP-ID f inst-ref
	set_disp_mid_freq 				\ DISP-ID
	radio_ref_unlock ;
	
\ ----------------------------------
\ Freq update
: disp_evt_r1_vfo	SED: a --
	"DISP-R1" swap disp_evt_vfo	;
	
\ ----------------------------------
: disp_evt_r2_vfo	SED: a --
	"DISP-R2" swap disp_evt_vfo	;

\ ----------------------------------
: disp_evt_r3_vfo	SED: a --
	"DISP-R3" swap disp_evt_vfo	;

\ ----------------------------------
\ Mode update
: disp_evt_r1_mode	SED: a --
	"mode" m:@
	"DISP-R1" radio_ref 
	set_disp_mode
	"DISP-R1" radio_ref_unlock 
	drop
;

: disp_evt_r2_mode	SED: a --
	"mode" m:@
	"DISP-R2" radio_ref 
	set_disp_mode
	"DISP-R2" radio_ref_unlock 
	drop
;

: disp_evt_r3_mode	SED: a --
	"mode" m:@
	"DISP-R3" radio_ref 
	set_disp_mode
	"DISP-R3" radio_ref_unlock 
	drop
;

\ ----------------------------------
\ Filter update
: disp_evt_r1_filt	SED: a --
	"filter" m:@
	"DISP-R1" radio_ref 
	set_disp_filt
	"DISP-R1" radio_ref_unlock 
	drop
;

: disp_evt_r2_filt	SED: a --
	"filter" m:@
	"DISP-R2" radio_ref 
	set_disp_filt
	"DISP-R2" radio_ref_unlock 
	drop
;

: disp_evt_r3_filt	SED: a --
	"filter" m:@
	"DISP-R3" radio_ref 
	set_disp_filt
	"DISP-R3" radio_ref_unlock 
	drop
;

\ ========================================
\ Subscribe to available radios
: disp_subscribe_radios_1
	DISP_R1_FREQ ' disp_evt_r1_vfo fr:pubsub_subscribe
	DISP_R1_MODE ' disp_evt_r1_mode fr:pubsub_subscribe 
	DISP_R1_FILT ' disp_evt_r1_filt fr:pubsub_subscribe ;

: disp_subscribe_radios_2
	DISP_R2_FREQ ' disp_evt_r2_vfo fr:pubsub_subscribe
	DISP_R2_MODE ' disp_evt_r2_mode fr:pubsub_subscribe 
	DISP_R2_FILT ' disp_evt_r2_filt fr:pubsub_subscribe ;

: disp_subscribe_radios_3
  DISP_R3_FREQ ' disp_evt_r3_vfo fr:pubsub_subscribe
	DISP_R3_MODE ' disp_evt_r3_mode fr:pubsub_subscribe 
	DISP_R3_FILT ' disp_evt_r3_filt fr:pubsub_subscribe ;

: disp_do_r1_sub
	disp_subscribe_radios_1 ;
	
: disp_do_r2_sub
	disp_subscribe_radios_1 
	disp_subscribe_radios_2 ;
	
: disp_do_r3_sub
	disp_subscribe_radios_1
	disp_subscribe_radios_2 
	disp_subscribe_radios_3 ;
	
: disp_subscribe	\  --
  \ Subscribe to events
	[ ' disp_do_r1_sub , ' disp_do_r2_sub , ' disp_do_r3_sub ]
	swap caseof
;

\ ========================================
\ Restore namespace	
ns: user	