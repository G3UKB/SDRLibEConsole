(*
	renderer_frag.8th
 
  Pan and waterfall display for radios
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
     
  Fragment - a UI fragment is a composable component that can be arranged into
  a window for rendering. The fragment itself may use a generic component part
  such as a display, vfo or button box. The fragment is responsible for interactions with 
  the rest of the system by sending and receiving events.
*)

needs stack/3drop

\ Use SDR namespace
ns: sdr
with: fr.gs
with: fr.ps

\ ========================================
\ Variables


\ ===============================================================================
\ PRIVATE
\	Convention: all private words start __
\ ===============================================================================

: render_1_publish ;
: render_2_publish ;
: render_3_publish ;

: render_1_subscribe ;
: render_2_subscribe ;
: render_3_subscribe ;

\ ============================================================================
\ Initialisation

\ ----------------------------------
\ Create renderer for radio(s)
\ name bounds -- disp-n-gui
: render_frag_new	SED: s s -- g
	\ Create
	swap dup	>r \ bounds name name
	{ DISP-1: ' render_1_publish , DISP-2: ' render_2_publish , DISP-3: ' render_3_publish } 
	r@ m:@ nip 
	drop swap renderer_new
	\ Initialise
	renderer_init
	rdrop
	\ Subscribe
	\ { DISP-1: ' render_1_subscribe , DISP-2: ' render_2_subscribe , DISP-3: ' render_3_subscribe } 
	\ r@ m:@ nip w:exec
;

\ ========================================
\ Reset namespace
ns: user
