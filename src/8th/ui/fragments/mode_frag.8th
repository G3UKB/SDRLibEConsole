(*
	mode_frag.8th
 
  Button pane for mode buttons.
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
     
  Fragment - a UI fragment is a composable component that can be arranged into
	a window for rendering. The fragment itself may use a generic component part
	such as a vfo or button box. The fragment is responsible for interactions with 
  the rest of the system by sending and receiving events.
*)

needs stack/3drop

\ Use SDR namespace
ns: sdr
with: fr.gs
with: fr.ps

\ ========================================
\ Variables


\ ===============================================================================
\ PRIVATE
\	Convention: all private words start __
\ ===============================================================================
\ user-data --
: mode_1_publish	SED: s
	\ Set null callback word as no response required.
	a:new swap a:push null +sender SYS_R1_MODE publish drop
;

: mode_2_publish	SED: s
	\ Set null callback word as no response required.
	a:new swap a:push null +sender SYS_R2_MODE publish drop
;

: mode_3_publish	SED: s
	\ Set null callback word as no response required.
	a:new swap a:push null +sender SYS_R3_MODE publish drop
;

\ ========================================
\ Events
\ All buttons click in group
\ gui -- gui
: mode_button_click	SED: g -- g
	g:on? if
		"user-data" g:m@
		swap g:parent "id" g:m@ nip
		\ user-data id
		{ MODE-1: ' mode_1_publish , MODE-2: ' mode_2_publish , MODE-3: ' mode_3_publish } 
		swap m:@ nip w:exec
	then
;

\ ========================================
\ Helpers
: mode_button_spec	SED: -- m
	{
		"id" : "BB-MODE",
		"rows" : 4, 
		"cols" : 3,
		"spec" : [
			["LSB", ` CH_LSB ` , ' mode_button_click ],
			["USB", ` CH_USB ` , ' mode_button_click ],
			["DSB", ` CH_DSB ` , ' mode_button_click ],
			["CW-L", ` CH_CWL ` , ' mode_button_click ],
			["CW-U", ` CH_CWU ` , ' mode_button_click ],
			["FM", ` CH_FM ` , ' mode_button_click ],
			["AM", ` CH_AM ` , ' mode_button_click ],
			["DIGU", ` CH_DIGU ` , ' mode_button_click ],
			["SPEC", ` CH_SPEC ` , ' mode_button_click ],
			["DIGL", ` CH_DIGL ` , ' mode_button_click ],
			["SAM", ` CH_SAM ` , ' mode_button_click ],
			["DRM", ` CH_DRM ` , ' mode_button_click ]
		]
	}
;

\ ========================================
\ Events

\ ----------------------------------
\ Get mode from event data
\ {"cb" w, "data" [data, sender, w|null] -- mode
: __data_get_mode	SED: m -- n
	"data" m:@ nip 0 a:@ nip
;

\ ----------------------------------
\ Get gui ref for this frag
\ gui-name -- gui
: __mode_gui_ref	SED: s -- g
	g_cache_get
;

\ ----------------------------------
\ Toggle button
\ mode name --
: __mode_tail	SED: n s --
	__mode_gui_ref	\ mode gui
	swap g:child true g:on
;

\ Message handlers
\ {"cb" w, "data" [data, sender, w|null]} -- 
: mode_r1	SED: m -- 
	__data_get_mode
	MODE-1 __mode_tail
;
: mode_r2	SED: m -- 
	__data_get_mode
	MODE-2 __mode_tail
;
: mode_r3	SED: m -- 
	__data_get_mode
	MODE-3 __mode_tail
;

\ ========================================
\ Subscriptions

\ ----------------------------------
\ Subscribe to mode-n events
\  --
: mode_1_subscribe	SED:  --
	 t:name@ ' mode_r1 UI_R1_MODE subscribe
;
: mode_2_subscribe	SED:  --
	 t:name@ ' mode_r2 UI_R2_MODE subscribe
;
: mode_3_subscribe	SED:  --
	 t:name@ ' mode_r3 UI_R3_MODE subscribe
;


\ ===============================================================================
\ PUBLIC
\ ===============================================================================

\ New button box according to spec
\ name bounds -- main-control-gui
: mode_frag_new	SED: s s -- g
	\ Pop in the bounds
	1 pick >r
	mode_button_spec 
	"bounds" rot m:!
	"id" rot m:!
	new_button_box 
	{ MODE-1: ' mode_1_subscribe , MODE-2: ' mode_2_subscribe , MODE-3: ' mode_3_subscribe } 
	r> m:@ nip w:exec
;

\ ===============================================================================
\ Restore namespace	
ns: user	
