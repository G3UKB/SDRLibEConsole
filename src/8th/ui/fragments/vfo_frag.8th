(*
	vfo_frag.8th
 
  VFO control for radios
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
     
  Fragment - a UI fragment is a composable component that can be arranged into
  a window for rendering. The fragment itself may use a generic component part
  such as a vfo or button box. The fragment is responsible for interactions with 
  the rest of the system by sending and receiving events.
*)

needs stack/3drop

\ ========================================
\ Testing only
false var, vfo_1_test

\ ----------------------------------
vfo_1_test @ #if
	\ Includes
	"E:/Projects/Framework/trunk/src/8th/gen_server.8th" f:include
	"E:/Projects/Framework/trunk/src/8th/pub_sub.8th" f:include
	"../../common/app_defs.8th" f:include
	"../../common/radio_defs.8th" f:include
	"../../common/ps_events.8th" f:include
	"../common/layout.8th" f:include
	"../common/font_cache.8th" f:include
	"../common/g_cache.8th" f:include
	"../components/vfo.8th" f:include
	\ needs debug/sed
	\ true SED-CHECK
	\ needs debug/trace
	\ dbg:line-info
#then
\ ========================================

\ Use SDR namespace
ns: sdr
with: fr.gs
with: fr.ps

\ ========================================
\ Variables


\ ===============================================================================
\ PRIVATE
\	Convention: all private words start __
\ ===============================================================================

\ ========================================
\ Events

\ ----------------------------------
\ Get frequency from event data
\ {"cb" w, "data" [data, sender, w|null] -- freq-in-hz
: __data_get_freq	SED: m -- n
	"data" m:@ nip 0 a:@ nip
;

\ ----------------------------------
\ Get gui ref for this VFO
\ gui-name -- gui
: __vfo_gui_ref	SED: s -- g
	g_cache_get
;

\ ----------------------------------
\ Update frequency in the VFO gui object
\ freq vfo-gui -- vfo-gui
: __update_gui_map	SED: n g -- g
	"freq" rot g:m!
;

\ ----------------------------------
\ Update radio frequency
\ freq name --
: vfo_tail	SED: n s --
	__vfo_gui_ref
	__update_gui_map
	__reset_all_digits
	g:invalidate drop
;

\ {"cb" w, "data" [data, sender, w|null]} -- 
: vfo_r1_freq	SED: m -- 
	__data_get_freq
	VFO-1 vfo_tail
;
: vfo_r2_freq	SED: m -- 
	__data_get_freq
	VFO-2 vfo_tail
;
: vfo_r3_freq	SED: m -- 
	__data_get_freq
	VFO-3 vfo_tail
;

\ ========================================
\ Subscriptions

\ ----------------------------------
\ Subscribe to VFO-n events
\  --
: vfo_1_subscribe	SED:  --
	 t:name@ ' vfo_r1_freq UI_R1_FREQ subscribe
;
: vfo_2_subscribe	SED:  --
	 t:name@ ' vfo_r2_freq UI_R2_FREQ subscribe
;
: vfo_3_subscribe	SED:  --
	 t:name@ ' vfo_r3_freq UI_R3_FREQ subscribe
;

\ ========================================
\ Callbacks

\ ----------------------------------
\ Publish frequency update
\ freq-in-hz -- 
: vfo_1_publish SED: n --
	\ Set null callback word as no response required.
	a:new swap a:push null +sender SYS_R1_FREQ publish drop
;
: vfo_2_publish SED: n --
	\ Set null callback word as no response required.
	a:new swap a:push null +sender SYS_R2_FREQ publish drop
;
: vfo_3_publish SED: n --
	\ Set null callback word as no response required.
	a:new swap a:push null +sender SYS_R3_FREQ publish drop
;

\ ===============================================================================
\ PUBLIC
\ ===============================================================================

\ ----------------------------------
\ Create VFO for radio-1
\ name bounds -- vfo-1-gui
: vfo_frag_new	SED: s s -- g
	\ Create
	swap dup	>r \ bounds name name
	{ VFO-1: ' vfo_1_publish , VFO-2: ' vfo_2_publish , VFO-3: ' vfo_3_publish } 
	r@ m:@ nip 
	rot swap 	\ name bounds callback
	vfo_new
	\ Initialise
	vfo_init
	\ Subscribe
	{ VFO-1: ' vfo_1_subscribe , VFO-2: ' vfo_2_subscribe , VFO-3: ' vfo_3_subscribe } 
	r@ m:@ nip w:exec
;

\ ===============================================================================
\ Restore namespace	
ns: user	

\ ===============================================================================
\ ===============================================================================
\ Testing
\ ===============================================================================

vfo_1_test @ #if
	with: sdr
	with: fr.gs
	with: fr.ps

	true app:isgui !
	4 json-pretty
	
	\ This is VFO fragment using the VFO component.
	\ 1. It publishes frequency changes to SYS_R1_FREQ. We must have agen-server that
	\			subscribes to SYS_R1_FREQ. to receive the events.
	\ 2. It subscribes to frequency changes which may come from the model at initialisation
	\			or a band change or click-frequency etc. We must have a task that publishes
	\			some frequency changes to test the subscription. This does not have to be a gen-server
	\			as it can just push publications.
	
	\ ========================================
	\ These are gen_server words for the EVNT_TASK gen_server

	\ ----------------------------------
	\ Called by published frequency changes
	: evnt_freq
		0 a:@ nip log
	;

	\ ----------------------------------
	\ Called from a gen_server message to subscribe to the frequency change
	: evnt_subscribe
		t:name@ ' evnt_freq SYS_R1_FREQ subscribe
	;
	
	\ ========================================
	\ Startup/terminate

	\ Once app:isgui is set true the main task will no longer respond to events such as t:notify
	\ If we create a gen_server on the main task of a GUI app it will hang on the -1 sleep
	\ never seeing the notify.
	\ We srart the gen_server here in a separate startup task.
	: startup_task
		\ Create gen_server
		"EVNT_TASK" gen_server_new
		\ Tell it to do subscriptions
		"EVNT_TASK" ' evnt_subscribe null msg!
		\ Wait until told to close at EOD so refs are maintained
		-1 sleep
		"Startup task exiting..." log
		0.1 sleep
	;
	
	\ ----------------------------------
	\ onexit callback
	: term_callback
		\ Else messages get lost
		false log-async
		\ Terminate gen_server
		"EVNT_TASK" gen_server_term
		0.1 sleep
		\ Terminate startup task
		"startup_task" t:@ dup t:notify t:wait
		\ Wait for tasks to go
		wait_all
		\ Messages flush
		0.1 sleep
	;
	
	\ ========================================
	\ Send periodic updates
	: update_task
		\ Send frequency updates
		repeat
			5 sleep
			[10000000] t:name@ a:push null a:push UI_R1_FREQ publish drop
		again
	;
	
	\ ----------------------------------
	\ Entry point 
	\ Create a test window and add the button box
	: app:main
		\ Create startup task and keep reference
		' startup_task t:task "startup_task" t:!
		\ Set exit handler
		' term_callback onexit

		\ A minimal window to hold our test component
		{
			"kind" : "win",
			"title" : "ButtonBox",
			"visible" : true,
			"ontop" : false,
			"bg" : "gray10",
			"resize-corner" : 20,
			"wide" : 400,
			"high" : 200,
			"top" : 100,
			"left" : 100,
			"children" : []
		} g:new dup "win" t:!
		\ Create the vfo
		VFO-1 "0,0,300,50" vfo_frag_new
		\ Add to the window
		"win" t:@ swap g:+child
		\ VFO update task
		' update_task t:task "update_task" t:!
	;
#then