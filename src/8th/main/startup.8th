(* 
	startup.8th
 
  Startup application tasks.
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
     
  Application startup is largely asyncronous as there are many tasks which
  initialise and communicate via messages. As things have to happen the righ
  order i.e Subscriptions before Publications the startup is synchronised.
  	
*)

\ Set namespace
ns: sdr
with: fr.gs
with: fr.ps
with: fr.sm

\ Temp to get going
: sender
	a:new swap a:push null +sender msg!
;

\ ===============================================================================
\ Runs on its own thread and then waits for closedown before exiting.
\ All gen-server tasks are started here but this task is not itself a
\ gen-server.
: startup_task	SED: --
	\ in: 	none
	\ out:	none
	\ Add our task to the task registry so we can use the messaging system
	"STARTUP_TASK" t:name!
	t:curtask STARTUP_TASK reg!
	t:curtask log
	\ Make sure the task Q does not throw
	t:getq false q:throwing drop
	
	\ ----------------------------------
	"Creating gen-server tasks..." log
	
	\ ----------------------------------
	\ The connector task is our interface to the SDRLibE server.
	\ Connector init and subscriptions
	conn_init
	conn_subscribe
	\ Temp to get radio going before we send other events.
	CONNECTOR_TASK ' t_conn_set_default_route null sender "Set default route" log
	CONNECTOR_TASK ' t_conn_discover null sender "Discover" log
	CONNECTOR_TASK ' t_conn_start_server null sender "Start server" log
	CONNECTOR_TASK ' t_conn_start_radio 0 sender "Start radio" log
	1 sleep
	\ ----------------------------------
	\ Models init only
	radio_model_init
	(*
	\ ----------------------------------
	\ See if we have a server or simulator running
	conn_poll not if
		"\n\n\***The console cannot run without SDRLibEConnector server or a simulator." log
		"***Please start the server or simulator and then restart the console." log
		"***Press any key to exit the application\n\n" log
		"STARTUP_TASK" gs_reg_rm
		con:key
		bye
	then
	*)
		
	\ ----------------------------------
	\ Wait to be informed that the UI is fully running
	-1 sleep
	\ Once UI is stable we can populate it with the UI event data
	\ The sys event data could be sent earlier but this is a good sync point
	radio_model_sys_events
	radio_model_ui_events
	\ We have started multiple tasks from the startup task
	\ We keep a reference to it and close it at the end of
	\ the shutdown before waiting for all tasks.
	-1 sleep
	
	\ Exit message
	"Startup task - exiting..." log 
;

\ ========================================
\ Reset namespace
ns: user