(*
	app_main.8th
 
  Main application for SDRLibEConsole
 
 Copyright C 2018 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

\ ============================================================================

\ Include all include files
"includes.8th" f:include

\ Make this a gui app
true app:isgui !
\ true log-async

\ Set namespace
ns: sdr

(*
	Entry point for the SDRLibEConsole application. This sets up the entire application
	and then hands control over to the GUI by exiting app:main whereupon the GUI event
	loop is entered. 
*)

\ ----------------------------------
\ We start all gen-server tasks from the startup task
: startup_task	SED: --
	\ in: 	none
	\ out:	none
	\ ----------------------------------
	\ Start the gen_server tasks
	\ This has to be done in the correct order as events will
	\ start flying around the system and we want the subscribers
	\ to be ready before the publishers else events will be missed.
	\ Set our task in the task registry
	"STARTUP_TASK" t:name!
	t:curtask "STARTUP_TASK" fr:gs_reg!
	
	\ Make sure the q does not throw
	t:getq false q:throwing drop
	
	\ ----------------------------------
	\ Allocate param stack for this thread
	param_st_alloc
	
	\ ----------------------------------
	"Creating gen-server tasks..." log
	\ Publish/Subscribe
	\ Initialise
	' do_registrations fr:pubsub_init
	\ Testing only
	\ test_registrations
	
	\ ----------------------------------
	\ Models
	option_model_init
	option_model_ui_evnts
	\ 2 sleep
	app_model_init
	app_model_ui_evnts
		
	\ ----------------------------------
	\ Connector
	\ Initialise
	conn_init
	\ Attempt connection but do not start anything
	false 1 ' conn_try_connect t:task-n \ 2 sleep
	
	"STARTUP_TASK exiting" log ;

\ ----------------------------------
\ We cleanup all gen-server tasks
\ Has to be a separate task so we can reeceive responses
: cleanup_task	SED: --
	\ in: 	none
	\ out:	none
	\ Otherwise messages are lost in closedown
	false log-async
	\ Allocate param stack for this thread
	param_st_alloc
	
	"Shutdown in progress" log
	\ Close connector
	conn_term
	\ Close models
	option_model_term
	app_model_term
	\ Close pub/sub
	fr:pubsub_term
	"Cleanup task exiting" log ;
	
\ ----------------------------------
\ Called on application exit
: cleanup	SED: --
	\ in: 	none
	\ out:	none
	\ Otherwise messages are lost in closedown
	false log-async
	' cleanup_task t:task 
	\ We have to wait a good time here because
	\ 1. The cleanup task kicks off multiple other tasks to terminat...
	\ 2. The cleanup task exits long before those tasks actually complete.
	\ 3. We have to wait for everything to close down before we can wait for the tasks.
	\ 4. Waiting too early means the wait can take the lock on the task array and then
	\ 	deadlocks the tasks that are trying to close. We should be able to find out
	\		when it is safe but havn't figured that yet.
	7.0 sleep
	\ Wait for all tasks to terminate
	fr:gs_wait_all
	"Shutdown complete" log
	\ Wait for messages to flush
	1.0 sleep ;

\ ===============================================================================
\ Application entry point  
: app:main	SED: --
	\ in: 	none
	\ out:	none
	\ ----------------------------------
	\ Set our task name
	"MainThrd" t:name!
	t:curtask . cr
	
	\ ----------------------------------
	\ Pretty print Json
	\ Note: this messes up save/restore so use only for debug
	\ 2 G:json-pretty
	
	\ Allocate param stack fot main thread
	param_st_alloc
	
	\ ----------------------------------
	\ Create test main window
	\ We must create all windows up front so everything gets populated by the models.
	create_main
	
	\ ----------------------------------
	\ Start the gen_server tasks
	' startup_task t:task
	
	\ ----------------------------------
  \ Set our cleanup word
  ' cleanup onexit
  
  \ On exit from app:main the GUI event loop is started
  "Exiting app_main" log ;

\ ========================================
\ Reset namespace
ns: user