(* 
	disp_events.8th
 
  SDRLibEConnector server display event handler
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com

	This is the server display system task[s]. It is a gen-server which starts and controls three
	reader tasks, one for each radio display.
	
	Display data for panadapter/waterfall and WBS is high volume with a frequency of no less
	than 200ms, otherwise the display will be visibly jerky.
	
	We tell the server what data is required i.e r1/r2/r3/wbs and the required frequency of that data. The
	server will then send that data on separate UDP channels for each display at the requested frequency. 
	We start a reader thread for each display. These threads are enabled/disabled by the svr_evnt_set_disp_state
	call. When a reader thread is active data received is encoded into a number of arrays directly within each reader
	task for easy consumption by the renderer. There is adequate time within the 100-200ms frequency to encode in
	the same task thus no data copy or locking is required as this would be costly with high volume data.

*)

needs stack/3drop

\ ========================================
\ Testing only
false var, disp_evnt_test
disp_evnt_test @ #if
	\ Includes
	"E:/Projects/Framework/trunk/src/8th/gen_server.8th" f:include
	"E:/Projects/Framework/trunk/src/8th/pub_sub.8th" f:include
	"../common/app_defs.8th" f:include
	"../common/radio_defs.8th" f:include
	"../common/ps_events.8th" f:include
	"../common/run_state.8th" f:include
	"../connector/connector.8th" f:include
	"../ui/displays/renderer.8th" f:include
	"disp_context.8th" f:include
	"disp_defs.8th" f:include
	"disp_calc.8th" f:include
	"disp_encoder.8th" f:include
	\ needs debug/sed
	\ true SED-CHECK
#then

\ Set namespace
ns: sdr
with: fr.gs
with: fr.ps

\ ===============================================================================
\ PRIVATE
\ Convention: private words start: 		__svr_evnt_
\ ===============================================================================

\ Initialisation
: __svr_evnt_host	"127.0.0.1" ;
\ : __svr_evnt_host	"192.168.1.14 ;
: __svr_evnt_d1_port 10011 ;
: __svr_evnt_d2_port 10012 ;
: __svr_evnt_d3_port 10013 ;
	
\ Create UDP socket
: __svr_evnt_create_d1_sock
	{ "domain" : ` net:INET4 ` , "type" : ` net:DGRAM ` , "proto" : ` net:PROTO_UDP ` } net:socket dup "udp_d1_evnt_sock" t:!
	__svr_evnt_host __svr_evnt_d1_port net:getaddrinfo swap net:bind ;

: __svr_evnt_create_d2_sock
	{ "domain" : ` net:INET4 ` , "type" : ` net:DGRAM ` , "proto" : ` net:PROTO_UDP ` } net:socket dup "udp_d2_evnt_sock" t:!
	__svr_evnt_host __svr_evnt_d2_port net:getaddrinfo swap net:bind ;
	
: __svr_evnt_create_d3_sock
	{ "domain" : ` net:INET4 ` , "type" : ` net:DGRAM ` , "proto" : ` net:PROTO_UDP ` } net:socket dup "udp_d3_evnt_sock" t:!
	__svr_evnt_host __svr_evnt_d3_port net:getaddrinfo swap net:bind ;
	
\ ----------------------------------	
\ Get command socket
: __svr_evnt_d1_sock@	"udp_d1_evnt_sock" t:@ ;
: __svr_evnt_d2_sock@	"udp_d2_evnt_sock" t:@ ;
: __svr_evnt_d3_sock@	"udp_d3_evnt_sock" t:@ ;

\ ===============================================================================
\ Message handlers
: __svr_evnt_run	SED: n --
	"run" "state" t:! drop
;

: __svr_evnt_term	SED: n --
	"term" "state" t:! drop
;

: __svr_evnt_mid_freq	SED: n --
	__push_mid_freq
;

: __svr_evnt_win_metrics	SED: a --
	__push_win_metrics
;

: __svr_evnt_disp_metrics	SED: a --
	__push_disp_metrics
;
	
\ ===============================================================================
\ Subscriptions
: __svr_event_subs_1	SED: --
	t:name@ ' __svr_evnt_run SYS_EVNT_R1_RUN subscribe
	t:name@ ' __svr_evnt_term SYS_EVNT_R1_TERM subscribe
	t:name@ ' __svr_evnt_mid_freq SYS_R1_FREQ subscribe
	t:name@ ' __svr_evnt_win_metrics SYS_R1_WIN_METRICS subscribe
	t:name@ ' __svr_evnt_disp_metrics SYS_R1_DISP_METRICS subscribe
;

: __svr_event_subs_2	SED: --
	t:name@ ' __svr_evnt_run SYS_EVNT_R2_RUN subscribe
	t:name@ ' __svr_evnt_term SYS_EVNT_R2_TERM subscribe
	t:name@ ' __svr_evnt_mid_freq SYS_R2_FREQ subscribe
	t:name@ ' __svr_evnt_win_metrics SYS_R2_WIN_METRICS subscribe
	t:name@ ' __svr_evnt_disp_metrics SYS_R2_DISP_METRICS subscribe
;

: __svr_event_subs_3	SED: --	
	t:name@ ' __svr_evnt_run SYS_EVNT_R3_RUN subscribe
	t:name@ ' __svr_evnt_term SYS_EVNT_R3_TERM subscribe
	t:name@ ' __svr_evnt_mid_freq SYS_R3_FREQ subscribe
	t:name@ ' __svr_evnt_win_metrics SYS_R3_WIN_METRICS subscribe
	t:name@ ' __svr_evnt_disp_metrics SYS_R3_DISP_METRICS subscribe
;

: __svr_event_subs	SED: --
	[ ' __svr_event_subs_1 , ' __svr_event_subs_2 , ' __svr_event_subs_3 ]
	"reader_inst" t:@ n:1- caseof
;

\ ===============================================================================
\ Reader/builder task
\ Read event data while enabled and not terminated
\ Write event data to the data-buffer, then dispatch
\ to the appropriate builder task.
: __svr_evnt_reader	SED: net s n --
	\ in:		0: n 		- instance 	
	\				1: s 		- name
	\				2: net 	- socket
	\ out:	none
	
	\ ----------------------------------
	\ Task initialisation
	\ Set instance
	"reader_inst" t:!
	\ Set task name
	dup t:name!
	\ Register the task instance to allow communication
	t:curtask swap reg!
	\ Save socket ref
	"reader_skt" t:!
	\ Make sure the q does not throw
	t:getq false q:throwing drop
	\ Create builder data
	__builder_data_new
	\ Do subscriptions
	__svr_event_subs
	
	\ ----------------------------------
	\ Wait for work
	"idle" "state" t:!
	repeat
		msg@
		\ Check for start/term message
		"state" t:@ "run" s:= if break then
		"state" t:@ "term" s:= if
			t:name@ " exiting... [" s:+ depth >s s:+ "]" s:+ log ;;
		then
		0.1 sleep
	again
	t:name@ "-starting run section" s:+ log
	\ ----------------------------------
	\ Repeat until termination
	repeat
		\ Check for messages at top of loop
		msg@
		\ Check for term message
		"state" t:@ "term" s:= if 
			break
		else
			\ See if we have read data on our socket
			"reader_skt" t:@ true 500 net:wait if
				\ Socket says yes
				__get_data_buffer 0 net:recvfrom null? not if
					\ The data is stored in the task variable - data-buf
					3drop drop
					\ Call the display builder to build the arrays
					\ Convert byte data to floats and extract meter data
					__copy_to_raw
					\ Build the arrays for the renderer
					disp_builder
					\ Transfer data and invoke renderer
					"reader_inst" t:@ __builder_data_xfer
				then
			else
				\ drop socket
				drop
			then
		then
	again
	t:name@ " exiting... [" s:+ depth >s s:+ "]" s:+ log
;

\ ========================================
\ General management

\ Initialise the sockets
: t_disp_evnt_init	SED:  --
	\ in: 	none
	\ out:	none
	\ Create sockets
	__svr_evnt_create_d1_sock
	__svr_evnt_create_d2_sock
	__svr_evnt_create_d3_sock
	\ Start a reader task for each potential radio
	__svr_evnt_d1_sock@ "DISP-R1-TASK" 1 3 ' __svr_evnt_reader t:task-n "DISP-R1-TASK" t:!
	__svr_evnt_d2_sock@ "DISP-R2-TASK" 2 3 ' __svr_evnt_reader t:task-n "DISP-R2-TASK" t:!
	__svr_evnt_d3_sock@ "DISP-R3-TASK" 3 3 ' __svr_evnt_reader t:task-n "DISP-R3-TASK" t:!
;

\ ----------------------------------	
\ Set the display period in ms
\ [period, task, w|null] -- 
: t_disp_evnt_set_disp_period	SED: a -- T
	\ in: 	0: n - update period in ms
	\ out:	0: T - true if success
	CONNECTOR_TASK ' t_conn_disp_period rot [0] a:@@ nip null +sender msg!
;

\ ----------------------------------
\ Enable/disable displays
\ ACK/NAK --
: __resp_set_disp_state	SED: a -- 
	conn_decode_response
	if 
		\ Enable the corresponding reader tasks
		"disp_enable" t:@ a:open
	 	if ["run"] null +sender SYS_EVNT_R1_RUN publish drop then
	 	if ["run"] null +sender SYS_EVNT_R2_RUN publish drop then
	 	if ["run"] null +sender SYS_EVNT_R3_RUN publish drop then
	then 
;

\ ----------------------------------
\ Enable/disable displays
\ [[T,T,T], sender, w|null] --
: t_disp_evnt_set_disp_state	SED: a -- 
	CONNECTOR_TASK ' t_conn_disp_state rot 0 a:_@ dup "disp_enable" t:! a:new swap a:push ' __resp_set_disp_state +sender msg! 
;

\ ----------------------------------
\ Terminate displays
: t_disp_evnt_term	SED:  -- 
	["term"] null +sender SYS_EVNT_R1_TERM publish drop
	["term"] null +sender SYS_EVNT_R2_TERM publish drop
	["term"] null +sender SYS_EVNT_R3_TERM publish drop
;

\ ===============================================================================
\ PUBLIC
\ ===============================================================================

\ ========================================
\ Initialisation and termination

\ ----------------------------------
\ Module initialisation
: disp_evnt_init	SED: --
	\ in: 	none
	\ out:	none
	
	\ Create the disp-event task gen-server
	DISP_EVNT_TASK gen_server_new
	\ Ask the disp-event task to run init sequence
	DISP_EVNT_TASK ' t_disp_evnt_init null msg!
;

\ ----------------------------------
\ Module close
: disp_evnt_term	SED: --
	\ in: 	none
	\ out:	none
	\ Tidy close the connector
	DISP_EVNT_TASK ' t_disp_evnt_term null msg!
	1 sleep
	DISP_EVNT_TASK gen_server_term
	0.1 sleep
;

\ ========================================
\ Reset namespace
ns: user

\ ===============================================================================
\ ===============================================================================
\ Testing
\ ===============================================================================
disp_evnt_test @ #if
	with: sdr
	with: fr.gs
	with: fr.ps

	4 json-pretty
	
	: reg_task
		\ Must register REPL in the task repos to be able to reply
		t:curtask t:name@ reg!
		\ Set q to null on empty
		t:getq false q:throwing \ do not drop q else crashes
	;

	\ All responses here
	: w
		log
	;

	\ Send a message, get a rsponse
	: sender
		a:new swap a:push ' w  +sender msg! response@ 
	;
		
	\ Basic start radio with default audio
	: script
		reg_task
		conn_init
		1 sleep
		"POLL" log
		\ CONNECTOR_TASK ' t_conn_poll null sender
		1 sleep
		"START RADIO" log
		CONNECTOR_TASK ' t_conn_set_default_route null sender "Set default route" log
		CONNECTOR_TASK ' t_conn_discover null sender "Discover" log
		CONNECTOR_TASK ' t_conn_start_server null sender "Start server" log
		CONNECTOR_TASK ' t_conn_start_radio 0 sender "Start radio" log
		"START DISPLAY" log
		disp_evnt_init
		1 sleep
		"SENDING EVENTS" log
		[14300000] null +sender SYS_R1_FREQ publish drop
		[[500,200]] null +sender SYS_R1_WIN_METRICS publish drop
		[[480,180]] null +sender SYS_R1_DISP_METRICS publish drop
		1 sleep
		"RUN DISP" log
		DISP_EVNT_TASK ' t_disp_evnt_set_disp_period [100] null +sender msg!
		DISP_EVNT_TASK ' t_disp_evnt_set_disp_state [[false,false,true]] null +sender msg!
		
		con:key
		
		conn_term
		disp_evnt_term
	;
	
	script
	"Test complete" log
	1 sleep
	bye
#then