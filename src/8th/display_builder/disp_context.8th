(* 
	disp_context.8th

	Display context

	Copyright C 2019 by G3UKB Bob Cowdery
	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	at your option any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

	The author can be reached by email at:   
		 bob@bobcowdery.plus.com
*)

needs stack/rstack
\ Use SDR namespace
ns: sdr

\ ========================================
\ Builder variables for capture and building
: __builder_working	SED: --
	{
		\ ========================================
		\ Window metrics
		"win-metrics" : [500,200],	\ Window area for display
		"disp-metrics" : [480,180],	\ Client area for graphs
		
		\ ========================================
		\ Display data
		"data-buffer" : ` 20000 b:new 0x0 b:fill ` ,	\ hw data buffer
		"raw-data" : [],				\ raw float array formatted from data buffer
		
		\ ========================================
		\ Radio state
		"mid-freq" : 7100000
	}
;

\ Builder data created during each build process
\ This data has to be passed to the renderer
: __builder_results	SED: --
	{
		"rx-meter" : 0.0,				\ meter data
		"fixed-data" : [],			\ [[x-start, y-start, x-stop, y-stop],...]
		"v-label-data" : [],		\ [[label,x,y], [label,x,y],...]
		"h-label-data" : [],		\ [[label,x,y], [label,x,y],...]
		"pan-data" : [],				\ [[x,y],[x,y],...]
		"wf-data" : []					\ [[x,color],[x,color],...]
	}
;

\ ========================================
\ Create instance for radio
: __builder_data_new SED:  --
	__builder_working "builder-working" t:!
	__builder_results "builder-results" t:!
;

\ ========================================
\ Data transfer to renderer
\ Here we dispatch the data to the GUI task

: __builder_xfer_1	SED: id --
	m:new "cb" ' __renderer_xfer_1 m:!
	"data" "builder-results" t:@ const m:!
	g:do
;

: __builder_xfer_2	SED: id --
	m:new "cb" ' __renderer_xfer_2 m:!
	"data" "builder-results" t:@ const m:!
	g:do
;

: __builder_xfer_3	SED: id --
	m:new "cb" ' __renderer_xfer_3 m:!
	"data" "builder-results" t:@ const m:!
	g:do
;


: __builder_data_xfer	SED: id --
	[ ' __builder_xfer_1 , ' __builder_xfer_2 , ' __builder_xfer_3 ]
	swap n:1- caseof
;

\ ========================================
\ Access words for display data
\ Change all these to eg __builder_raw_data@
\ ========================================
\ Readers for builder working data
: __get_data_buffer
	"builder-working" t:@ "data-buffer" m:_@
;
: __get_raw_data_ref
	"builder-working" t:@ "raw-data" m:_@
;
: __get_win_width
	"builder-working" t:@ "win-metrics" m:_@ 0 a:_@
;
: __get_win_height
	"builder-working" t:@ "win-metrics" m:_@ 1 a:_@
;
: __get_disp_width
	"builder-working" t:@ "disp-metrics" m:_@ 0 a:_@
;
: __get_disp_height
	"builder-working" t:@ "disp-metrics" m:_@ 1 a:_@
;
: __get_mid_freq
	"builder-working" t:@ "mid-freq" m:_@
;
\ ========================================
\ Readers for builder results data
: __get_pan_data_ref
	"builder-results" t:@ "pan-data" m:_@
;
: __get_wf_data_ref
	"builder-results" t:@ "wf-data" m:_@
;
: __get_v_label_data_ref
	"builder-results" t:@ "v-label-data" m:_@
;
: __get_h_label_data_ref
	"builder-results" t:@ "h-label-data" m:_@
;
: __get_fixed_data_ref
	"builder-results" t:@ "fixed-data" m:_@
;

\ ========================================
\ Writers for builder working data
: __push_raw	SED: n --
	"builder-working" t:@ "raw-data" rot m:! drop
;
: __push_win_metrics	SED: a --
	"builder-working" t:@ "win-metrics" rot m:! drop
;
: __push_disp_metrics	SED: a --
	"builder-working" t:@ "disp-metrics" rot m:! drop
;
: __push_mid_freq	SED: n --
	"builder-working" t:@ "mid-freq" rot m:! drop
;

\ ========================================
\ Writers for builder results data
: __push_meter	SED: n --
	"builder-results" t:@ "rx-meter" rot m:! drop
;

\ ========================================
\ Conversions
\ Convert and save raw data
: __copy_to_raw	SED: m --
	\ in: 	0: m - display instance data			
	\ out:	none
	
	\ The buffer is display width +1 for the meter data
	__get_data_buffer
	\ Width of this radio display
	\ __get_disp_width dup "Raw: " . . cr
	__get_win_width \ dup "Raw: " . . cr
	\ unpacked array
	n:1+ >s "f" s:+ unpack drop
	\ Get/save the meter data which is 0th element of the array
	a:shift __push_meter
	\ Store remainder of the float array in raw
	__push_raw
;

\ ========================================
\ Restore namespace	
ns: user	