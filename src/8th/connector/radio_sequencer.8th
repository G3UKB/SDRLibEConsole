(* 
	radio_sequencer.8th
 
  Manage startup and radio start/stop
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
	
	radio startup determins if the server is running.
		- running - issues start up sequence to make the radio operational.
		- not running - output a message dialog but allow the GUI to continue.
*)

needs gui/msgdlg
\ true dbg:line-info

\ ========================================
\ Testing only
false var, radio_manager_test
radio_manager_test @ #if
	\ Includes
	"E:/Projects/Framework/trunk/src/8th/gen_server.8th" f:include
	"E:/Projects/Framework/trunk/src/8th/pub_sub.8th" f:include
	"../common/app_defs.8th" f:include
	"../common/radio_defs.8th" f:include
	"../common/ps_events.8th" f:include
	"../common/run_state.8th" f:include
	"connector.8th" f:include
	\ needs debug/sed
	\ true SED-CHECK
#then

\ Set namespace
ns: sdr
with: fr.gs
with: fr.ps

\ ===============================================================================
\ PRIVATE

\ ========================================
\ User messages

\ ----------------------------------
\ Dialog response
: __rm_msg_resp	SED: g n --
	\ Just hide the dialog
	drop g:hide
;

\ ----------------------------------
\ Called on main thread to put up warning dialog when server is not found
\ {w,msg} --
: __rm_do_msg	SED: s --
	"msg" m:@ nip
	{
		"title" : "Radio Status",
		"top" : 200,
		"left" : 100,
		"high" : 150,
		"wide" : 400,
		"font" : "Arial 14",
		"button-font" : "Arial 12",
		"bg" : "gray",
		"fg" : "red"
		\ "msg" : "SDRLibEConnector server is not running. Please start in order to use the radio"
	}
	"msg" rot m:!
	"parent"  "win" t:@ m:!
	"cb" ' __rm_msg_resp m:!
	g:msgdlg	
;

\ ========================================
\ Response handlers for sequencer task

\ ----------------------------------
\ Decode response
\ response-map -- true(good)|false(bad)
: __rm_decode_response	SED: m -- T
	"resp" m:@ "ACK" s:= nip if true else false then
;

\ ----------------------------------
\ Response from stop radio
: __rm_stop_radio_response	SED: * --
	__rm_decode_response if
		false rst_running!
	else
		\ Failed to stop radio
		{ "cb" : ' __rm_do_msg , "msg" : "SDRLibEConnector failed to stop radio!" } g:do
		true rst_running!
	then	
;

\ ----------------------------------
\ Response from start radio
: __rm_start_radio_response	SED: * --
	__rm_decode_response if
		true rst_running!
	else
		\ Failed to start radio
		{ "cb" : ' __rm_do_msg , "msg" : "SDRLibEConnector failed to start radio!" } g:do
		false rst_running!
	then	
;

\ ----------------------------------
\ Response from start server
: __rm_server_response	SED: * --
	__rm_decode_response if
		true rst_server!
	else
		\ Failed to start server, we can still run but can't really do very much
		{ "cb" : ' __rm_do_msg , "msg" : "SDRLibEConnector failed to set default audio route!" } g:do
		false rst_server!
	then	
;

\ ----------------------------------
\ Response from radio discover
: __rm_discover_response	SED: * --
	__rm_decode_response if
		true rst_online!
		CONNECTOR_TASK ' t_conn_start_server [null] ' __rm_server_response +sender msg! response@
	else
		\ No radio hardware, we can still run but can't really do very much
		{ "cb" : ' __rm_do_msg , "msg" : "SDRLibEConnector failed to discover radio hardware!" } g:do
		false rst_online!
	then	
;

\ ----------------------------------
\ Response from set default audio route
: __rm_route_response	SED: * --
	__rm_decode_response if
		true rst_audio!
		CONNECTOR_TASK ' t_conn_discover [null] ' __rm_discover_response +sender msg! response@
	else
		\ No server, we can still run but can't really do very much
		{ "cb" : ' __rm_do_msg , "msg" : "SDRLibEConnector failed to set default audio route!" } g:do
		false rst_audio!
	then	
;

\ ----------------------------------
\ Response from default startup
: __rm_poll_response	SED: * --
	__rm_decode_response if
		true rst_poll!
		CONNECTOR_TASK ' t_conn_set_default_route [null] ' __rm_route_response +sender msg! response@
	else
		\ No server, we can still run but can't really do very much
		{ "cb" : ' __rm_do_msg , "msg" : "SDRLibEConnector server is not running or cannot be contacted!" } g:do
		false rst_poll!
	then	
;
		
\ ===============================================================================
\ Message handlers for SEQUENCER task
\ These words are called from the startup task and GUI
\ 
\ ========================================
\ Main control

\ ----------------------------------
\ Run the radio start sequence
: rm_start_sequence	SED: --
	
	\ See if we have a server or simulator running
	CONNECTOR_TASK ' t_conn_poll [null] ' __rm_poll_response +sender msg! response@
;

\ ----------------------------------
\ Start radio
: rm_start_radio	SED: --
	
	\ See if we have a server or simulator running
	CONNECTOR_TASK ' t_conn_start_radio [null] ' __rm_start_radio_response +sender msg! response@
;

\ ----------------------------------
\ Stop radio
: rm_stop_radio	SED: --
	
	\ See if we have a server or simulator running
	CONNECTOR_TASK ' t_conn_stop_radio [null] ' __rm_stop_radio_response +sender msg! response@
;

\ ========================================
\ Initialisation and termination

\ ----------------------------------
\ Module initialisation
: sequencer_init	SED: --
	\ in: 	none
	\ out:	none
	
	\ Create the sequencer gen-server
	SEQUENCER_TASK gen_server_new
	\ Ask the sequencer to run startup sequence
	SEQUENCER_TASK ' rm_start_sequence null msg!
;

\ ----------------------------------
\ Module close
: sequencer_term	SED: --
	\ in: 	none
	\ out:	none
	\ Tidy close the connector
	SEQUENCER_TASK gen_server_term
	0.1 sleep
;

\ ========================================
\ Reset namespace
ns: user

\ ===============================================================================
\ ===============================================================================
\ Testing
\ ===============================================================================
radio_manager_test @ #if
	with: sdr
	with: fr.gs
	with: fr.ps

	true app:isgui !
	4 json-pretty
	
	\ Runs like the startup process
	
	\ ========================================
	\ Startup/terminate

	\ Once app:isgui is set true the main task will no longer respond to events such as t:notify
	\ If we create a gen_server on the main task of a GUI app it will hang on the -1 sleep
	\ never seeing the notify.
	\ We srart the gen_server here in a separate startup task.
	: startup_task
	
		\ Create gen_servers
		conn_init
		sequencer_init
		1 sleep
		SEQUENCER_TASK ' rm_start_radio null msg!
		1 sleep
		rst_status
		\ Wait until told to close at EOD so refs are maintained
		-1 sleep
		"Startup task exiting..." log
		0.1 sleep
	;
	
	\ ----------------------------------
	\ onexit callback
	: term_callback
		\ Else messages get lost
		false log-async
		\ Terminate gen_server
		sequencer_term
		conn_term
		0.1 sleep
		\ Terminate startup task
		"startup_task" t:@ dup t:notify t:wait
		\ Wait for tasks to go
		wait_all
		\ Messages flush
		0.1 sleep
	;
	
	\ ----------------------------------
	\ GUI as we need to raise a dialog
	: main_window
		\ A minimal window so we can raise dialog
		{
			"kind" : "win",
			"title" : "SDRLibEConsole",
			"visible" : true,
			"ontop" : false,
			"bg" : "gray10",
			"resize-corner" : 20,
			"wide" : 400,
			"high" : 200,
			"top" : 100,
			"left" : 100,
			"children" : []
		} g:new dup "win" t:!
	;
	
	\ ----------------------------------
	\ Entry point 
	\ Create a test window and add the button box
	: app:main
			\ Create startup task and keep reference
			' startup_task t:task "startup_task" t:!
			\ Set exit handler
			' term_callback onexit
			\ Create window
			main_window
	;
#then
