(* 
	radio_sequencer.8th
 
  Manage startup and radio start/stop
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
	
	radio startup determins if the server is running.
		- running - issues start up sequence to make the radio operational.
		- not running - output a message dialog but allow the GUI to continue.
*)

needs gui/msgdlg

\ Set namespace
ns: sdr
with: fr.gs
with: fr.ps

\ ===============================================================================
\ PRIVATE

\ ========================================
\ User messages

\ ----------------------------------
\ Dialog response
: __rm_msg_resp	SED: g n --
	\ Just hide the dialog
	drop g:hide
;

\ ----------------------------------
\ Called on main thread to put up warning dialog when server is not found
\ {w,msg} --
: __rm_do_msg	SED: s --
	"msg" m:@ nip
	{
		"title" : "Radio Status",
		"top" : 200,
		"left" : 100,
		"high" : 150,
		"wide" : 400,
		"font" : "Arial 14",
		"button-font" : "Arial 12",
		"bg" : "gray",
		"fg" : "red"
		\ "msg" : "SDRLibEConnector server is not running. Please start in order to use the radio"
	}
	"msg" rot m:!
	"parent"  "win" t:@ m:!
	"cb" ' __rm_msg_resp m:!
	g:msgdlg	
;

\ ========================================
\ Response handlers for sequencer task

\ ----------------------------------
\ Response from stop radio
: __rm_stop_radio_response	SED: * --
	conn_decode_response if
		false rst_running!
	else
		\ Failed to stop radio
		{ "cb" : ' __rm_do_msg , "msg" : "SDRLibEConnector failed to stop radio!" } g:do
		true rst_running!
	then	
;

\ ----------------------------------
\ Response from start radio
: __rm_start_radio_response	SED: * --
	conn_decode_response if
		true rst_running!
	else
		\ Failed to start radio
		{ "cb" : ' __rm_do_msg , "msg" : "SDRLibEConnector failed to start radio!" } g:do
		false rst_running!
	then	
;

\ ----------------------------------
\ Response from start server
: __rm_server_response	SED: * --
	conn_decode_response if
		true rst_server!
	else
		\ Failed to start server, we can still run but can't really do very much
		{ "cb" : ' __rm_do_msg , "msg" : "SDRLibEConnector failed to set default audio route!" } g:do
		false rst_server!
	then	
;

\ ----------------------------------
\ Response from radio discover
: __rm_discover_response	SED: * --
	conn_decode_response if
		true rst_online!
		CONNECTOR_TASK ' t_conn_start_server [null] ' __rm_server_response +sender msg!
	else
		\ No radio hardware, we can still run but can't really do very much
		{ "cb" : ' __rm_do_msg , "msg" : "SDRLibEConnector failed to discover radio hardware!" } g:do
		false rst_online!
	then	
;

\ ----------------------------------
\ Response from set default audio route
: __rm_route_response	SED: * --
	conn_decode_response if
		true rst_audio!
		CONNECTOR_TASK ' t_conn_discover [null] ' __rm_discover_response +sender msg!
	else
		\ No server, we can still run but can't really do very much
		{ "cb" : ' __rm_do_msg , "msg" : "SDRLibEConnector failed to set default audio route!" } g:do
		false rst_audio!
	then	
;

\ ----------------------------------
\ Response from default startup
: __rm_poll_response	SED: * --
	conn_decode_response if
		true rst_poll!
		CONNECTOR_TASK ' t_conn_set_default_route [null] ' __rm_route_response +sender msg!
	else
		\ No server, we can still run but can't really do very much
		{ "cb" : ' __rm_do_msg , "msg" : "SDRLibEConnector server is not running or cannot be contacted!" } g:do
		false rst_poll!
	then	
;
		
\ ===============================================================================
\ Message handlers for SEQUENCER task
\ These words are called from the startup task and GUI
\ 
\ ========================================
\ Main control

\ ----------------------------------
\ Run the radio start sequence
\ [data, sender, w|null] --
: rm_start_sequence	SED: a --
	
	\ See if we have a server or simulator running
	CONNECTOR_TASK ' t_conn_poll [null] ' __rm_poll_response +sender msg!
;

\ ----------------------------------
\ Start radio
\ [data, sender, w|null] --
: rm_start_radio	SED: a --
	
	\ See if we have a server or simulator running
	CONNECTOR_TASK ' t_conn_start_radio rot [0] a:@@ nip ' __rm_start_radio_response +sender msg!
;

\ ----------------------------------
\ Stop radio
\ [data, sender, w|null] --
: rm_stop_radio	SED: a --
	
	\ See if we have a server or simulator running
	CONNECTOR_TASK ' t_conn_stop_radio [null] ' __rm_stop_radio_response +sender msg!
;

\ ========================================
\ Initialisation and termination

\ ----------------------------------
\ Module initialisation
: sequencer_init	SED: --
	\ in: 	none
	\ out:	none
	
	\ Create the sequencer gen-server
	SEQUENCER_TASK gen_server_new
	\ Ask the sequencer to run startup sequence
	SEQUENCER_TASK ' rm_start_sequence [null] null +sender msg!
;

\ ----------------------------------
\ Module close
: sequencer_term	SED: --
	\ in: 	none
	\ out:	none
	\ Tidy close the connector
	SEQUENCER_TASK gen_server_term
	0.1 sleep
;

\ ========================================
\ Reset namespace
ns: user
